const { PrismaClient } = require('./server/node_modules/@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã...');
  console.log('=' .repeat(50));
  
  const email = 'oksanahavryliak1965@gmail.com';
  
  // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await prisma.user.findUnique({
    where: { email },
    include: { 
      credits: {
        orderBy: { createdAt: 'asc' }
      },
      payments: true,
      subscription: true
    }
  });
  
  if (!user) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  console.log(`üìß –ò—Å–ø—Ä–∞–≤–ª—è—é –¥–ª—è: ${user.email}`);
  console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.totalCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
  
  // –ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PURCHASE –æ–ø–µ—Ä–∞—Ü–∏–∏
  const purchaseCredits = user.credits.filter(c => c.type === 'PURCHASE');
  
  console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ PURCHASE –æ–ø–µ—Ä–∞—Ü–∏–π: ${purchaseCredits.length}`);
  
  if (purchaseCredits.length <= 1) {
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    return;
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ OrderReference –∏–∑ description
  const orderRefGroups = {};
  purchaseCredits.forEach(credit => {
    const match = credit.description?.match(/WFP-BTN-\d+-[a-f0-9]+/);
    if (match) {
      const orderRef = match[0];
      if (!orderRefGroups[orderRef]) {
        orderRefGroups[orderRef] = [];
      }
      orderRefGroups[orderRef].push(credit);
    }
  });
  
  console.log('\nüìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ OrderReference:');
  let totalDuplicates = 0;
  let creditsToRemove = [];
  
  Object.entries(orderRefGroups).forEach(([orderRef, credits]) => {
    console.log(`   ${orderRef}: ${credits.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    if (credits.length > 1) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
      const sorted = credits.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      const keep = sorted[0];
      const duplicates = sorted.slice(1);
      
      console.log(`      ‚úÖ –û—Å—Ç–∞–≤–ª—è—é: ${new Date(keep.createdAt).toLocaleString()}`);
      duplicates.forEach(dup => {
        console.log(`      ‚ùå –£–¥–∞–ª—è—é: ${new Date(dup.createdAt).toLocaleString()}`);
        creditsToRemove.push(dup);
        totalDuplicates += dup.amount;
      });
    }
  });
  
  if (creditsToRemove.length === 0) {
    console.log('\n‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  console.log(`\nüóëÔ∏è  –ö —É–¥–∞–ª–µ–Ω–∏—é: ${creditsToRemove.length} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—É–º–º—É ${totalDuplicates} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const result = await prisma.$transaction(async (tx) => {
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ credit –∑–∞–ø–∏—Å–∏
    const creditIds = creditsToRemove.map(c => c.id);
    await tx.credit.deleteMany({
      where: { id: { in: creditIds } }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = user.totalCredits - totalDuplicates;
    const updatedUser = await tx.user.update({
      where: { id: user.id },
      data: { totalCredits: newBalance }
    });
    
    return { deletedCredits: creditIds.length, newBalance };
  });
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:');
  console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${result.deletedCredits}`);
  console.log(`   üí∞ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${user.totalCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
  console.log(`   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
  console.log(`   üìâ –£–±—Ä–∞–Ω–æ –ª–∏—à–Ω–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: ${totalDuplicates}`);
  
  // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  console.log('\nüîß –û—á–∏—â–∞—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏...');
  
  const paymentGroups = {};
  user.payments.forEach(payment => {
    const orderRef = payment.wayforpayOrderReference;
    if (orderRef) {
      if (!paymentGroups[orderRef]) {
        paymentGroups[orderRef] = [];
      }
      paymentGroups[orderRef].push(payment);
    }
  });
  
  let paymentsToDelete = [];
  Object.entries(paymentGroups).forEach(([orderRef, payments]) => {
    if (payments.length > 1) {
      const sorted = payments.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      const keep = sorted[0];
      const duplicates = sorted.slice(1);
      
      paymentsToDelete.push(...duplicates.map(p => p.id));
      console.log(`   ${orderRef}: –û—Å—Ç–∞–≤–ª—è—é 1 –∏–∑ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
    }
  });
  
  if (paymentsToDelete.length > 0) {
    await prisma.payment.deleteMany({
      where: { id: { in: paymentsToDelete } }
    });
    console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentsToDelete.length}`);
  }
  
  console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

main()
  .catch(console.error)
  .finally(() => prisma.$disconnect());