import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function checkCredits() {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        username: true,
        totalCredits: true,
        lastCreditUpdate: true,
        createdAt: true
      }
    });
    
    console.log('üîç –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –∫—Ä–µ–¥–∏—Ç—ã:');
    users.forEach(user => {
      console.log(`üìß ${user.email || user.username || user.id}`);
      console.log(`   üí∞ –ö—Ä–µ–¥–∏—Ç—ã: ${user.totalCredits}`);
      console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.lastCreditUpdate}`);
      console.log(`   üóìÔ∏è –°–æ–∑–¥–∞–Ω: ${user.createdAt}`);
      console.log('   ---');
    });
    
    // –ù–∞–π–¥–µ–º —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –≤—ã)
    const latestUser = users.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0];
    if (latestUser) {
      console.log('üë§ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç):');
      console.log(`   ID: ${latestUser.id}`);
      console.log(`   Email: ${latestUser.email}`);
      console.log(`   –ö—Ä–µ–¥–∏—Ç—ã: ${latestUser.totalCredits}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkCredits();