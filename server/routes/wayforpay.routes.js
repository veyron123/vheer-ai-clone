import { Router } from 'express';
import { authenticate } from '../middleware/auth.middleware.js';
import {
  initializePayment,
  handleCallback,
  checkPaymentStatus,
  cancelSubscription,
  initializeCartPayment,
  handleCartCallback
} from '../controllers/wayforpay.controller.js';

const router = Router();

// Initialize payment (requires authentication)
router.post('/init', authenticate, initializePayment);

// Handle WayForPay callback (no auth required - called by WayForPay)
router.post('/callback', handleCallback);

// Check payment status
router.get('/status/:orderId', authenticate, checkPaymentStatus);

// Cancel subscription
router.post('/cancel', authenticate, cancelSubscription);

// === CART PAYMENT ROUTES (One-time payments) ===

// Initialize cart payment (no auth required - allows guest checkout)
router.post('/cart-checkout', initializeCartPayment);

// Handle WayForPay callback for cart payments (no auth required)
router.post('/cart-callback', handleCartCallback);

// Success page for WayForPay redirects (no CORS restrictions)
// Handle both GET and POST requests from WayForPay
const handleSuccess = (req, res) => {
  // Allow any origin for success page
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  
  // Get parameters from query (GET) or body (POST)
  const params = req.method === 'GET' ? req.query : req.body;
  
  // Debug: log all received parameters
  console.log('üîç SUCCESS PAGE - Method:', req.method);
  console.log('üîç SUCCESS PAGE - Headers:', JSON.stringify(req.headers, null, 2));
  console.log('üîç SUCCESS PAGE - All params:', JSON.stringify(params, null, 2));
  console.log('üîç SUCCESS PAGE - Available keys:', Object.keys(params));
  console.log('üîç SUCCESS PAGE - Query params:', JSON.stringify(req.query, null, 2));
  console.log('üîç SUCCESS PAGE - Body params:', JSON.stringify(req.body, null, 2));
  
  // WayForPay –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const { 
    orderReference, 
    status, 
    transactionStatus, 
    reasonCode,
    authCode,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å WayForPay
    paymentStatus,
    orderStatus,
    merchantTransactionSecureType,
    cardPan,
    paymentSystemTransactionId
  } = params;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è)
  const finalStatus = status || transactionStatus || paymentStatus || orderStatus;
  
  console.log('üîç SUCCESS PAGE - Final status:', finalStatus);
  console.log('üîç SUCCESS PAGE - Order ref:', orderReference);
  console.log('üîç SUCCESS PAGE - Reason code:', reasonCode);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
  const redirectUrl = 'https://colibrrri.com/en/';
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WayForPay
  // –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ = transactionStatus: "Approved" –∏ reasonCode: "1100"
  // –ù–æ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
  const successStatuses = ['Approved', 'Accepted', 'InProcessing', 'WaitingAuthComplete', 'Success', 'Successful'];
  const successCodes = ['1100', 1100, '0', 0, '', null, undefined];
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å transactionStatus - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
  const checkStatus = finalStatus || status || transactionStatus || paymentStatus || orderStatus;
  const checkCode = reasonCode;
  
  // –õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π, —Ç–æ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç, –Ω–æ URL success –∏ –Ω–µ—Ç –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ - —Ç–æ–∂–µ —É—Å–ø–µ—à–Ω—ã–π
  const statusOk = successStatuses.includes(checkStatus);
  const codeOk = !checkCode || successCodes.includes(checkCode);
  const urlSuccess = req.path.includes('success'); // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–∞ success URL
  
  // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –µ—Å–ª–∏:
  // 1. –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π –ò (–∫–æ–¥ —É—Å–ø–µ—à–Ω—ã–π –ò–õ–ò –Ω–µ—Ç –∫–æ–¥–∞)
  // 2. –ò–õ–ò –ø—Ä–∏—à–ª–∏ –Ω–∞ success URL –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
  const isSuccessful = (statusOk && codeOk) || (urlSuccess && codeOk);
  
  console.log('üîç SUCCESS PAGE - Detailed status check:', {
    method: req.method,
    path: req.path,
    finalStatus,
    checkStatus,
    reasonCode: checkCode,
    statusOk,
    codeOk,
    urlSuccess,
    isSuccessful,
    allReceivedParams: params
  });
  
  if (isSuccessful) {
    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial; text-align: center; padding: 50px; }
          .success { color: green; font-size: 24px; margin-bottom: 20px; }
          .info { color: #666; margin-bottom: 30px; }
          .redirect { color: #007bff; }
        </style>
      </head>
      <body>
        <div class="success">‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</div>
        <div class="info">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderReference || 'N/A'}</div>
        <div class="redirect">–ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...</div>
        <script>
          setTimeout(() => {
            window.location.href = '${redirectUrl}';
          }, 3000);
        </script>
      </body>
      </html>
    `);
  } else {
    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</title>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial; text-align: center; padding: 50px; }
          .error { color: red; font-size: 24px; margin-bottom: 20px; }
          .info { color: #666; margin-bottom: 30px; }
          .redirect { color: #007bff; }
        </style>
      </head>
      <body>
        <div class="error">‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</div>
        <div class="info">–°—Ç–∞—Ç—É—Å: ${finalStatus || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
        <div class="redirect">–ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...</div>
        <script>
          setTimeout(() => {
            window.location.href = '${redirectUrl}';
          }, 3000);
        </script>
      </body>
      </html>
    `);
  }
};

// Register success handler for both GET and POST methods
router.get('/success', handleSuccess);
router.post('/success', handleSuccess);

// Debug endpoint to log what WayForPay sends (temporary)
router.all('/debug-callback', (req, res) => {
  console.log('üîç DEBUG CALLBACK - Method:', req.method);
  console.log('üîç DEBUG CALLBACK - Headers:', JSON.stringify(req.headers, null, 2));
  console.log('üîç DEBUG CALLBACK - Query:', JSON.stringify(req.query, null, 2));
  console.log('üîç DEBUG CALLBACK - Body:', JSON.stringify(req.body, null, 2));
  console.log('üîç DEBUG CALLBACK - URL:', req.url);
  console.log('üîç DEBUG CALLBACK - Path:', req.path);
  
  res.json({
    method: req.method,
    headers: req.headers,
    query: req.query,
    body: req.body,
    url: req.url,
    path: req.path,
    timestamp: new Date().toISOString()
  });
});

// Failure page for WayForPay redirects
router.get('/failure', (req, res) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  
  const { orderReference, reasonCode } = req.query;
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial; text-align: center; padding: 50px; }
        .error { color: red; font-size: 24px; margin-bottom: 20px; }
        .info { color: #666; margin-bottom: 30px; }
        .redirect { color: #007bff; }
      </style>
    </head>
    <body>
      <div class="error">‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω</div>
      <div class="info">–ó–∞–∫–∞–∑: ${orderReference || 'N/A'}<br>–ö–æ–¥: ${reasonCode || 'N/A'}</div>
      <div class="redirect">–ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...</div>
      <script>
        setTimeout(() => {
          window.location.href = 'https://colibrrri-fullstack.onrender.com';
        }, 3000);
      </script>
    </body>
    </html>
  `);
});

export default router;