import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function checkUserAccount() {
  try {
    const user = await prisma.user.findUnique({
      where: {
        email: 'unitradecargo@gmail.com'
      },
      select: {
        id: true,
        email: true,
        totalCredits: true,
        lastCreditUpdate: true,
        createdAt: true
      }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å unitradecargo@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ unitradecargo@gmail.com:');
    console.log(`   ID: ${user.id}`);
    console.log(`   üí∞ –¢–µ–∫—É—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: ${user.totalCredits}`);
    console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${user.lastCreditUpdate}`);
    console.log(`   üóìÔ∏è –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${user.createdAt}`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allGenerations = await prisma.generation.findMany({
      where: {
        userId: user.id
      },
      select: {
        id: true,
        model: true,
        status: true,
        creditsUsed: true,
        createdAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`\nüìä –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${allGenerations.length}`);
    
    let totalUsedCredits = 0;
    let successfulGenerations = 0;
    let failedGenerations = 0;

    allGenerations.forEach(gen => {
      totalUsedCredits += gen.creditsUsed || 0;
      if (gen.status === 'COMPLETED') {
        successfulGenerations++;
      } else if (gen.status === 'FAILED') {
        failedGenerations++;
      }
    });

    console.log(`üí∏ –û–±—â–∏–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: ${totalUsedCredits}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${successfulGenerations}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${failedGenerations}`);

    // –ü–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    console.log('\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:');
    allGenerations.slice(0, 10).forEach((gen, index) => {
      console.log(`${index + 1}. ${gen.model} - ${gen.status} - ${gen.creditsUsed} –∫—Ä–µ–¥–∏—Ç–æ–≤ - ${gen.createdAt}`);
    });

    // –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 0, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∂–µ email
    if (user.totalCredits === 0) {
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...');
      const duplicateUsers = await prisma.user.findMany({
        where: {
          OR: [
            { email: { contains: 'unitradecargo' } },
            { username: { contains: 'unitradecargo' } }
          ]
        }
      });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicateUsers.length} –ø–æ—Ö–æ–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:`);
      duplicateUsers.forEach(dupUser => {
        console.log(`   üìß ${dupUser.email} - ${dupUser.totalCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤ - ID: ${dupUser.id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserAccount();