import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testNewCreditLogic() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)...');
  
  try {
    // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: { 
        id: true,
        email: true,
        totalCredits: true,
        lastCreditUpdate: true,
        subscription: true
      }
    });

    const now = new Date();
    
    let freeUsersProcessed = 0;
    let premiumUsersSkipped = 0;
    
    for (const user of users) {
      const isFreePlan = !user.subscription || user.subscription.plan === 'FREE';
      
      if (isFreePlan) {
        console.log(`‚úÖ FREE user: ${user.email} - Credits: ${user.totalCredits} ‚Üí WOULD RESET TO 100`);
        freeUsersProcessed++;
      } else {
        console.log(`‚è≠Ô∏è PREMIUM user: ${user.email} (${user.subscription.plan}) - Credits: ${user.totalCredits} ‚Üí WOULD SKIP`);
        premiumUsersSkipped++;
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
    console.log(`üÜì FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${freeUsersProcessed} (–±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ 100)`);
    console.log(`üí≥ PREMIUM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${premiumUsersSkipped} (–±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã)`);
    console.log(`üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã —É premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const premiumUsers = users.filter(u => u.subscription && u.subscription.plan !== 'FREE');
    
    if (premiumUsers.length > 0) {
      console.log(`\nüí≥ –î–ï–¢–ê–õ–ò PREMIUM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:`);
      premiumUsers.forEach(user => {
        console.log(`üìß ${user.email}:`);
        console.log(`   üí∞ –¢–µ–∫—É—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: ${user.totalCredits}`);
        console.log(`   üìã –ü–ª–∞–Ω: ${user.subscription.plan}`);
        console.log(`   ‚è≠Ô∏è –î–µ–π—Å—Ç–≤–∏–µ: –ù–ï –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã`);
        console.log('   ---');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNewCreditLogic();