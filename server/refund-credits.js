import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function refundLostCredits() {
  try {
    // –ù–∞–π–¥–µ–º –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const failedGenerations = await prisma.generation.findMany({
      where: {
        status: 'FAILED',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        },
        creditsUsed: {
          gt: 0 // –ì–¥–µ –∫—Ä–µ–¥–∏—Ç—ã –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã
        }
      },
      include: {
        user: true
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${failedGenerations.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏`);

    if (failedGenerations.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const creditRefunds = {};
    failedGenerations.forEach(gen => {
      if (!creditRefunds[gen.userId]) {
        creditRefunds[gen.userId] = {
          user: gen.user,
          totalRefund: 0,
          generations: []
        };
      }
      creditRefunds[gen.userId].totalRefund += gen.creditsUsed;
      creditRefunds[gen.userId].generations.push({
        id: gen.id,
        model: gen.model,
        credits: gen.creditsUsed,
        date: gen.createdAt
      });
    });

    console.log('\nüí∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤:');
    for (const [userId, refundData] of Object.entries(creditRefunds)) {
      console.log(`üìß ${refundData.user.email}`);
      console.log(`   üí∏ –ö –≤–æ–∑–≤—Ä–∞—Ç—É: ${refundData.totalRefund} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      console.log(`   üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${refundData.user.totalCredits}`);
      console.log(`   üîÆ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${refundData.user.totalCredits + refundData.totalRefund}`);
      console.log(`   üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${refundData.generations.length}`);
      console.log('   ---');
    }

    // –°–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥)
    // –ù–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–º –≤–æ–∑–≤—Ä–∞—Ç
    console.log('\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤...');

    for (const [userId, refundData] of Object.entries(creditRefunds)) {
      const newBalance = refundData.user.totalCredits + refundData.totalRefund;
      
      await prisma.user.update({
        where: { id: userId },
        data: { 
          totalCredits: newBalance,
          lastCreditUpdate: new Date()
        }
      });

      console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${refundData.totalRefund} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${refundData.user.email}`);
    }

    console.log('\nüéâ –í—Å–µ –∫—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

refundLostCredits();