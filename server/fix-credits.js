import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixFreeUserCredits() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å FREE –ø–ª–∞–Ω–æ–º
    const freeUsers = await prisma.user.findMany({
      where: {
        OR: [
          { subscription: null },
          { subscription: { plan: 'FREE' } }
        ]
      },
      include: { subscription: true }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${freeUsers.length} FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    let updatedCount = 0;
    let alreadyCorrect = 0;
    
    for (const user of freeUsers) {
      const isFreePlan = !user.subscription || user.subscription.plan === 'FREE';
      
      if (isFreePlan && user.totalCredits !== 100) {
        const previousCredits = user.totalCredits;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 100 –∫—Ä–µ–¥–∏—Ç–æ–≤
        await prisma.user.update({
          where: { id: user.id },
          data: {
            totalCredits: 100,
            lastCreditUpdate: new Date()
          }
        });
        
        // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await prisma.credit.create({
          data: {
            userId: user.id,
            amount: 100 - previousCredits,
            type: 'CORRECTION',
            description: `Fixed FREE user credits from ${previousCredits} to 100`
          }
        });
        
        console.log(`‚úÖ ${user.email}: ${previousCredits} ‚Üí 100 –∫—Ä–µ–¥–∏—Ç–æ–≤`);
        updatedCount++;
        
      } else if (isFreePlan && user.totalCredits === 100) {
        console.log(`‚úì ${user.email}: —É–∂–µ 100 –∫—Ä–µ–¥–∏—Ç–æ–≤`);
        alreadyCorrect++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`‚úì –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${alreadyCorrect} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üìã –í—Å–µ–≥–æ FREE: ${freeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixFreeUserCredits();