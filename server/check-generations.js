import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function checkRecentGenerations() {
  try {
    // –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    const recentGenerations = await prisma.generation.findMany({
      select: {
        id: true,
        userId: true,
        model: true,
        status: true,
        creditsUsed: true,
        createdAt: true,
        user: {
          select: {
            email: true,
            totalCredits: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    });

    console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:');
    recentGenerations.forEach((gen, index) => {
      console.log(`${index + 1}. ${gen.user.email}`);
      console.log(`   üìù ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${gen.id}`);
      console.log(`   ü§ñ –ú–æ–¥–µ–ª—å: ${gen.model}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${gen.status}`);
      console.log(`   üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${gen.creditsUsed}`);
      console.log(`   üë§ –¢–µ–∫—É—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${gen.user.totalCredits}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–æ: ${gen.createdAt}`);
      console.log('   ---');
    });

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const failedGenerations = await prisma.generation.findMany({
      where: {
        status: 'FAILED',
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        }
      },
      select: {
        id: true,
        userId: true,
        model: true,
        creditsUsed: true,
        user: {
          select: {
            email: true,
            totalCredits: true
          }
        }
      }
    });

    if (failedGenerations.length > 0) {
      console.log('\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã):');
      failedGenerations.forEach(gen => {
        console.log(`   üìß ${gen.user.email}: –ø–æ—Ç–µ—Ä—è–Ω–æ ${gen.creditsUsed} –∫—Ä–µ–¥–∏—Ç–æ–≤ (ID: ${gen.id})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkRecentGenerations();