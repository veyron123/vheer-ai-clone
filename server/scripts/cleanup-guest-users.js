import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupGuestUsers() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –≥–æ—Å—Ç–µ–≤—ã–º–∏
    const guestUsers = await prisma.user.findMany({
      where: {
        OR: [
          { fullName: 'Guest User' },
          { email: { contains: 'guest_' } },
          { email: { contains: '@temp.com' } },
          { username: { contains: 'guest_' } },
          { emailVerified: false, totalCredits: 0, fullName: 'Guest User' }
        ]
      },
      include: {
        _count: {
          select: {
            images: true,
            generations: true,
            payments: true,
            orders: true,
            cartSessions: true
          }
        }
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${guestUsers.length} –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    if (guestUsers.length === 0) {
      console.log('‚úÖ –ì–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    guestUsers.forEach((user, index) => {
      console.log(`\n${index + 1}. ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   Full Name: ${user.fullName}`);
      console.log(`   Created: ${user.createdAt.toLocaleString('ru-RU')}`);
      console.log(`   Credits: ${user.totalCredits}`);
      console.log(`   Images: ${user._count.images}`);
      console.log(`   Generations: ${user._count.generations}`);
      console.log(`   Payments: ${user._count.payments}`);
      console.log(`   Orders: ${user._count.orders}`);
      console.log(`   Cart Sessions: ${user._count.cartSessions}`);
    });

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const usersToDelete = guestUsers.filter(user => 
      user._count.images === 0 && 
      user._count.generations === 0 && 
      user._count.orders === 0
    );

    console.log(`\nüóëÔ∏è  –ö —É–¥–∞–ª–µ–Ω–∏—é: ${usersToDelete.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)`);

    if (usersToDelete.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let deletedCount = 0;
    
    for (const user of usersToDelete) {
      try {
        console.log(`üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}...`);
        
        // –ü—Ä–∏–∑–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–∞—Å–∫–∞–¥–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é
        await prisma.user.delete({
          where: { id: user.id }
        });
        
        deletedCount++;
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${user.email}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${user.email}:`, error.message);
      }
    }

    console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –∏–∑ ${usersToDelete.length} –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const remainingActiveGuests = guestUsers.filter(user => 
      user._count.images > 0 || 
      user._count.generations > 0 || 
      user._count.orders > 0
    );

    if (remainingActiveGuests.length > 0) {
      console.log(`\n‚ö†Ô∏è  –û—Å—Ç–∞–≤–ª–µ–Ω–æ ${remainingActiveGuests.length} –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é:`);
      remainingActiveGuests.forEach(user => {
        console.log(`   - ${user.email} (${user._count.images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, ${user._count.generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, ${user._count.orders} –∑–∞–∫–∞–∑–æ–≤)`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
cleanupGuestUsers();