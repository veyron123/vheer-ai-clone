import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkPremiumUsers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞—Ç–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏...');
  
  try {
    const users = await prisma.user.findMany({
      include: { subscription: true },
      orderBy: { totalCredits: 'desc' }
    });

    const premiumUsers = [];
    const freeUsers = [];

    users.forEach(user => {
      const plan = user.subscription?.plan || 'FREE';
      const status = user.subscription?.status || 'NONE';
      
      if (plan !== 'FREE') {
        premiumUsers.push({
          email: user.email,
          credits: user.totalCredits,
          plan: plan,
          status: status,
          lastUpdate: user.lastCreditUpdate
        });
      } else {
        freeUsers.push({
          email: user.email,
          credits: user.totalCredits
        });
      }
    });

    console.log('\nüéØ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–õ–ê–¢–ù–´–ú–ò –ü–õ–ê–ù–ê–ú–ò:');
    console.log(`–ù–∞–π–¥–µ–Ω–æ: ${premiumUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
    
    if (premiumUsers.length === 0) {
      console.log('‚ùå –ù–ï–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞—Ç–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏!');
    } else {
      premiumUsers.forEach(user => {
        console.log(`üìß ${user.email}`);
        console.log(`   üí∞ –ö—Ä–µ–¥–∏—Ç—ã: ${user.credits}`);
        console.log(`   üìã –ü–ª–∞–Ω: ${user.plan} (${user.status})`);
        console.log(`   üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${user.lastUpdate}`);
        console.log('   ---');
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    const highCreditUsers = freeUsers.filter(user => user.credits > 1000);
    
    if (highCreditUsers.length > 0) {
      console.log('\n‚ö†Ô∏è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏:');
      highCreditUsers.forEach(user => {
        console.log(`üìß ${user.email}: ${user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      });
    }

    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üí≥ –ü–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã: ${premiumUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`üÜì FREE –ø–ª–∞–Ω: ${freeUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    console.log(`‚ö†Ô∏è FREE —Å >1000 –∫—Ä–µ–¥–∏—Ç–æ–≤: ${highCreditUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkPremiumUsers();