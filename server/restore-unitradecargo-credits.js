import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function restoreCredits() {
  try {
    const userId = 'cmeiiqjrb0000ef1lt2m3oarq'; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è unitradecargo@gmail.com
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è
    const todayStart = new Date();
    todayStart.setHours(0, 0, 0, 0);
    
    const failedGenerationsToday = await prisma.generation.findMany({
      where: {
        userId: userId,
        status: 'FAILED',
        createdAt: {
          gte: todayStart
        },
        creditsUsed: {
          gt: 0
        }
      }
    });

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${failedGenerationsToday.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è`);
    
    let totalRefund = 0;
    failedGenerationsToday.forEach(gen => {
      totalRefund += gen.creditsUsed;
      console.log(`‚ùå ${gen.model} - ${gen.creditsUsed} –∫—Ä–µ–¥–∏—Ç–æ–≤ - ${gen.createdAt}`);
    });

    if (totalRefund > 0) {
      // –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { totalCredits: true }
      });

      const newBalance = user.totalCredits + totalRefund;
      console.log(`\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.totalCredits}`);
      console.log(`üí∏ –ö –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalRefund}`);
      console.log(`üéØ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);

      // –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å
      await prisma.user.update({
        where: { id: userId },
        data: {
          totalCredits: newBalance,
          lastCreditUpdate: new Date()
        }
      });

      console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${totalRefund} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é unitradecargo@gmail.com`);
      console.log(`üéâ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
    }

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞
    const bonusCredits = 500;
    const finalUser = await prisma.user.findUnique({
      where: { id: userId },
      select: { totalCredits: true }
    });

    const finalBalance = finalUser.totalCredits + bonusCredits;
    
    await prisma.user.update({
      where: { id: userId },
      data: {
        totalCredits: finalBalance,
        lastCreditUpdate: new Date()
      }
    });

    console.log(`\nüéÅ –î–æ–±–∞–≤–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞: ${bonusCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
    console.log(`üèÜ –ò–¢–û–ì–û–í–´–ô –ë–ê–õ–ê–ù–°: ${finalBalance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

restoreCredits();