import cron from 'node-cron';
import { PrismaClient } from '@prisma/client';
import emailService from '../services/email.service.js';
import logger from '../utils/logger.js';

const prisma = new PrismaClient();

/**
 * –ü–æ–º–µ—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã –∫–∞–∫ –±—Ä–æ—à–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
 */
const markAbandonedCarts = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const delaySetting = await prisma.appSetting.findUnique({
      where: { key: 'abandoned_cart_delay_hours' }
    });
    const delayHours = parseInt(delaySetting?.value) || 2;
    const delayTime = new Date(Date.now() - delayHours * 60 * 60 * 1000);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –±—Ä–æ—à–µ–Ω–Ω—ã–µ
    const cartsToMark = await prisma.cartSession.findMany({
      where: {
        status: 'active',
        lastActivityAt: {
          lt: delayTime
        }
      }
    });
    
    if (cartsToMark.length === 0) {
      return { count: 0, emailsSent: 0 };
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –±—Ä–æ—à–µ–Ω–Ω—ã–µ
    const result = await prisma.cartSession.updateMany({
      where: {
        status: 'active',
        lastActivityAt: {
          lt: delayTime
        }
      },
      data: {
        status: 'abandoned',
        abandonedAt: new Date()
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let emailsSent = 0;
    const emailEnabled = await prisma.appSetting.findUnique({
      where: { key: 'email_notifications_enabled' }
    });
    
    if (emailEnabled?.value === 'true') {
      for (const cart of cartsToMark) {
        if (cart.customerEmail && !cart.emailSent) {
          try {
            const emailResult = await emailService.sendAbandonedCartReminder(
              cart.customerEmail,
              {
                sessionId: cart.sessionId,
                items: cart.items || [],
                totalAmount: cart.totalAmount || 0,
                createdAt: cart.createdAt
              }
            );
            
            if (emailResult.success) {
              // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
              await prisma.cartSession.update({
                where: { id: cart.id },
                data: { 
                  emailSent: true,
                  emailSentAt: new Date()
                }
              });
              emailsSent++;
            }
          } catch (error) {
            logger.error('Failed to send abandoned cart email', {
              cartId: cart.id,
              email: cart.customerEmail,
              error: error.message
            });
          }
        }
      }
    }
    
    if (result.count > 0) {
      console.log(`[${new Date().toISOString()}] üõí –ü–æ–º–µ—á–µ–Ω–æ ${result.count} –∫–æ—Ä–∑–∏–Ω –∫–∞–∫ –±—Ä–æ—à–µ–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent} email`);
    }
    
    return { count: result.count, emailsSent };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω:', error);
    return { count: 0, emailsSent: 0 };
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
 */
const cleanupOldCarts = async () => {
  try {
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    
    const result = await prisma.cartSession.deleteMany({
      where: {
        OR: [
          {
            status: 'abandoned',
            abandonedAt: {
              lt: thirtyDaysAgo
            }
          },
          {
            status: 'converted',
            createdAt: {
              lt: thirtyDaysAgo
            }
          }
        ]
      }
    });
    
    if (result.count > 0) {
      console.log(`[${new Date().toISOString()}] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.count} —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω`);
    }
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω:', error);
  }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω
 */
const initializeCartTrackingJobs = () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  cron.schedule('*/30 * * * *', async () => {
    await markAbandonedCarts();
  });
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 –Ω–æ—á–∏
  cron.schedule('0 3 * * *', async () => {
    await cleanupOldCarts();
  });
  
  console.log('‚úÖ –ó–∞–¥–∞—á–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
  console.log('   - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00');
};

export default initializeCartTrackingJobs;