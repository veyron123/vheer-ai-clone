import cron from 'node-cron';
import CreditService from '../services/creditService.js';

class CreditCronJob {
  static init() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º cron job –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
    cron.schedule('0 0 * * *', async () => {
      console.log('üï∞Ô∏è Daily credit cron job started at:', new Date().toISOString());
      
      try {
        const result = await CreditService.addDailyCreditsToAllUsers();
        
        console.log('‚úÖ Daily credit cron job completed:', {
          totalUsers: result.totalUsers,
          updatedUsers: result.updatedUsers,
          timestamp: new Date().toISOString()
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (result.updatedUsers > 0) {
          console.log(`üí∞ Successfully added daily credits to ${result.updatedUsers} users`);
        }
        
        if (result.totalUsers === 0) {
          console.log('‚ÑπÔ∏è No users found requiring daily credit updates');
        }

      } catch (error) {
        console.error('‚ùå Error in daily credit cron job:', error);
      }
    }, {
      scheduled: true,
      timezone: "UTC"
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    cron.schedule('0 */6 * * *', async () => {
      console.log('üîÑ Hourly credit check started at:', new Date().toISOString());
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
        const result = await CreditService.addDailyCreditsToAllUsers();
        
        if (result.updatedUsers > 0) {
          console.log(`üí∞ Catch-up credits added to ${result.updatedUsers} users`);
        }

      } catch (error) {
        console.error('‚ùå Error in hourly credit check:', error);
      }
    }, {
      scheduled: true,
      timezone: "UTC"
    });

    console.log('‚úÖ Credit cron jobs initialized successfully');
    console.log('üìÖ Daily credits will be added at 00:00 UTC every day');
    console.log('üîÑ Additional checks every 6 hours');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static async runManually() {
    try {
      console.log('üöÄ Manual credit update started');
      const result = await CreditService.addDailyCreditsToAllUsers();
      
      console.log('‚úÖ Manual credit update completed:', {
        totalUsers: result.totalUsers,
        updatedUsers: result.updatedUsers,
        timestamp: new Date().toISOString()
      });

      return result;
    } catch (error) {
      console.error('‚ùå Error in manual credit update:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
  static getNextRunInfo() {
    const now = new Date();
    const nextMidnight = new Date(now);
    nextMidnight.setUTCHours(24, 0, 0, 0);
    
    const nextSixHour = new Date(now);
    const currentHour = now.getUTCHours();
    const nextSixHourTime = Math.ceil(currentHour / 6) * 6;
    nextSixHour.setUTCHours(nextSixHourTime, 0, 0, 0);
    
    return {
      nextDailyRun: nextMidnight.toISOString(),
      nextHourlyCheck: nextSixHour.toISOString(),
      currentTime: now.toISOString()
    };
  }
}

export default CreditCronJob;