import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

class CreditService {
  // –ù–∞—á–∏—Å–ª–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è FREE –ø–ª–∞–Ω–∞)
  static async addDailyCredits(userId) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        include: {
          subscription: true
        }
      });

      if (!user) {
        throw new Error('User not found');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ FREE –ø–ª–∞–Ω –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
      const userPlan = user.subscription?.plan || 'FREE';
      if (userPlan !== 'FREE') {
        return {
          success: false,
          message: 'Daily credits are only for FREE plan users',
          currentCredits: user.totalCredits,
          userPlan: userPlan
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ —Å—É—Ç–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const now = new Date();
      const lastUpdate = new Date(user.lastCreditUpdate);
      const diffInHours = (now - lastUpdate) / (1000 * 60 * 60);

      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
      if (diffInHours < 24) {
        return {
          success: false,
          message: 'Daily credits already reset today',
          nextUpdate: new Date(lastUpdate.getTime() + 24 * 60 * 60 * 1000),
          currentCredits: user.totalCredits
        };
      }

      // –û–ë–ù–£–õ–Ø–ï–ú –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 100 –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º!)
      const updatedUser = await prisma.user.update({
        where: { id: userId },
        data: {
          totalCredits: 100, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–≤–Ω–æ 100, –∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
          lastCreditUpdate: now
        }
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–æ–≤
      await prisma.credit.create({
        data: {
          userId: userId,
          amount: 100 - user.totalCredits, // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
          type: 'DAILY_RESET',
          description: 'Daily credits reset to 100 (FREE plan)'
        }
      });

      return {
        success: true,
        message: 'Daily credits reset successfully',
        previousCredits: user.totalCredits,
        currentCredits: updatedUser.totalCredits,
        nextUpdate: new Date(now.getTime() + 24 * 60 * 60 * 1000)
      };

    } catch (error) {
      console.error('Error resetting daily credits:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async checkAndAddDailyCredits(userId) {
    try {
      return await this.addDailyCredits(userId);
    } catch (error) {
      console.error('Error checking daily credits:', error);
      return {
        success: false,
        message: 'Error checking daily credits',
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserCredits(userId) {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: {
          totalCredits: true,
          lastCreditUpdate: true
        }
      });

      if (!user) {
        throw new Error('User not found');
      }

      const now = new Date();
      const lastUpdate = new Date(user.lastCreditUpdate);
      const diffInHours = (now - lastUpdate) / (1000 * 60 * 60);
      const nextUpdate = new Date(lastUpdate.getTime() + 24 * 60 * 60 * 1000);

      return {
        currentCredits: user.totalCredits,
        lastUpdate: user.lastCreditUpdate,
        nextUpdate: nextUpdate,
        canClaimDaily: diffInHours >= 24,
        hoursUntilNext: Math.max(0, 24 - diffInHours)
      };

    } catch (error) {
      console.error('Error getting user credits:', error);
      throw error;
    }
  }

  // –°–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static async deductCredits(userId, amount, description = 'Image generation') {
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { totalCredits: true }
      });

      if (!user) {
        throw new Error('User not found');
      }

      if (user.totalCredits < amount) {
        throw new Error('Insufficient credits');
      }

      const updatedUser = await prisma.user.update({
        where: { id: userId },
        data: {
          totalCredits: user.totalCredits - amount
        }
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await prisma.credit.create({
        data: {
          userId: userId,
          amount: -amount,
          type: 'DEDUCTION',
          description: description
        }
      });

      return {
        success: true,
        remainingCredits: updatedUser.totalCredits,
        deductedAmount: amount
      };

    } catch (error) {
      console.error('Error deducting credits:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫—Ä–µ–¥–∏—Ç–æ–≤
  static async getCreditHistory(userId, limit = 50) {
    try {
      const credits = await prisma.credit.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        take: limit
      });

      return credits;
    } catch (error) {
      console.error('Error getting credit history:', error);
      throw error;
    }
  }

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π FREE –ø–ª–∞–Ω–∞ (–¥–ª—è cron job)
  static async addDailyCreditsToAllUsers() {
    try {
      const now = new Date();
      const yesterdayTime = new Date(now.getTime() - 24 * 60 * 60 * 1000);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å FREE –ø–ª–∞–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
      const users = await prisma.user.findMany({
        where: {
          lastCreditUpdate: {
            lt: yesterdayTime
          }
        },
        include: {
          subscription: true
        }
      });

      let updateCount = 0;
      let skippedCount = 0;
      const results = [];

      for (const user of users) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userPlan = user.subscription?.plan || 'FREE';
          
          if (userPlan !== 'FREE') {
            skippedCount++;
            results.push({
              userId: user.id,
              success: false,
              message: `Skipped - user has ${userPlan} plan`,
              plan: userPlan
            });
            continue;
          }

          const result = await this.addDailyCredits(user.id);
          if (result.success) {
            updateCount++;
          }
          results.push({
            userId: user.id,
            success: result.success,
            message: result.message,
            previousCredits: result.previousCredits,
            currentCredits: result.currentCredits
          });
        } catch (error) {
          results.push({
            userId: user.id,
            success: false,
            error: error.message
          });
        }
      }

      console.log(`üí∞ Daily credits reset completed:`, {
        totalUsers: users.length,
        freeUsersUpdated: updateCount,
        nonFreeUsersSkipped: skippedCount,
        timestamp: new Date().toISOString()
      });

      return {
        totalUsers: users.length,
        updatedUsers: updateCount,
        skippedUsers: skippedCount,
        results: results
      };

    } catch (error) {
      console.error('Error in mass daily credits reset:', error);
      throw error;
    }
  }
}

export default CreditService;