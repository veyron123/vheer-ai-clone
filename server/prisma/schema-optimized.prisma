generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String?
  fullName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  role            String    @default("USER") // USER, ADMIN
  totalCredits    Int       @default(100)
  lastCreditUpdate DateTime  @default(now())
  emailVerified   Boolean   @default(false)
  googleId        String?   @unique
  facebookId      String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscription    Subscription?
  images          Image[]
  generations     Generation[]
  credits         Credit[]
  payments        Payment[]
  favorites       Favorite[]
  cartOrders      CartOrder[]
  cartSessions    CartSession[]
  paymentIntents  PaymentIntent[]

  // New indexes for performance
  @@index([createdAt(sort: Desc)]) // For sorting users by creation date
  @@index([role]) // For filtering by role (admin queries)
  @@index([totalCredits]) // For credit-based queries
  @@map("colibrrri_users")
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String    @default("FREE")
  status          String    @default("ACTIVE")
  currentPeriodEnd DateTime?
  wayforpayOrderReference String? // WayForPay orderReference for cancellation
  
  // Recurring payment fields
  isRecurring     Boolean   @default(false)
  recurringToken  String?   // WayForPay recurring token
  recurringMode   String?   // MONTHLY, YEARLY
  nextPaymentDate DateTime? // Next auto-charge date
  lastPaymentDate DateTime? // Last successful payment date
  failedPaymentAttempts Int @default(0) // Count of failed payment attempts
  maxFailedAttempts Int @default(3) // Max attempts before cancellation
  
  cancelledAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // New indexes
  @@index([status, nextPaymentDate]) // For finding subscriptions to renew
  @@index([plan]) // For subscription statistics
  @@map("colibrrri_subscriptions")
}

model Credit {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int
  type            String
  description     String?
  createdAt       DateTime  @default(now())
  
  // New indexes
  @@index([userId, createdAt(sort: Desc)]) // For user credit history
  @@index([type]) // For credit type analytics
  @@map("colibrrri_credits")
}

model PaymentIntent {
  id            String    @id @default(cuid())
  trackingId    String    @unique
  orderReference String?  @unique
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String
  language      String    @default("en")
  status        String    @default("INITIATED") // INITIATED, COMPLETED, FAILED, EXPIRED
  wayforpayData Json?     // Store WayForPay response data
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  expiresAt     DateTime? // Auto-expire after 1 hour

  // New indexes
  @@index([userId, status]) // For user payment queries
  @@index([status, expiresAt]) // For cleanup queries
  @@map("colibrrri_payment_intents")
}

model Image {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  url             String
  thumbnailUrl    String?
  cloudPath       String?   // Path for cloud storage deletion
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  width           Int
  height          Int
  seed            Int?
  steps           Int?
  guidance        Float?
  isPublic        Boolean   @default(false)
  likes           Int       @default(0)
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  
  generation      Generation @relation(fields: [generationId], references: [id])
  generationId    String
  favorites       Favorite[]
  tags            Tag[]

  // Critical performance indexes
  @@index([userId, createdAt(sort: Desc)]) // User's images sorted by date
  @@index([model]) // Filter by AI model
  @@index([isPublic, likes(sort: Desc)]) // Public gallery sorted by popularity
  @@index([isPublic, createdAt(sort: Desc)]) // Public gallery sorted by date
  @@index([generationId]) // Generation relationship
  @@fulltext([prompt]) // Full-text search on prompts (PostgreSQL only)
  @@map("colibrrri_images")
}

model Generation {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  batchSize       Int       @default(1)
  status          String @default("PENDING")
  error           String?
  creditsUsed     Int
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  images          Image[]

  // New indexes
  @@index([userId, createdAt(sort: Desc)]) // User generation history
  @@index([status]) // For finding pending/failed generations
  @@index([model, createdAt(sort: Desc)]) // Analytics by model
  @@map("colibrrri_generations")
}

model Favorite {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId         String
  image           Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  
  @@unique([userId, imageId])
  // Additional index for faster queries
  @@index([imageId]) // For counting favorites per image
  @@map("colibrrri_favorites")
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String    @default("USD")
  status          String
  wayforpayOrderReference String? @unique
  description     String?
  cartItems       Json?     // Store original cart items for WayForPay callbacks
  createdAt       DateTime  @default(now())

  // New indexes
  @@index([userId, createdAt(sort: Desc)]) // User payment history
  @@index([status]) // Payment analytics
  @@index([createdAt(sort: Desc)]) // Recent payments
  @@map("colibrrri_payments")
}

model CartOrder {
  id                      String    @id @default(cuid())
  orderReference          String    @unique
  userId                  String?
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Payment info
  amount                  Float
  currency                String    @default("UAH")
  paymentStatus           String    @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  transactionStatus       String?   // From WayForPay
  reasonCode              String?   // From WayForPay
  authCode                String?   // From WayForPay
  cardPan                 String?   // Masked card number
  
  // Customer info (from payment form)
  customerEmail           String?
  customerFirstName       String?
  customerLastName        String?
  customerPhone           String?
  customerAddress         String?
  customerCity            String?
  customerCountry         String?
  
  // Shipping info (from payment form)
  shippingFirstName       String?
  shippingLastName        String?
  shippingPhone           String?
  shippingAddress         String?
  shippingCity            String?
  shippingCountry         String?
  shippingPostalCode      String?
  
  // Order items (stored as JSON)
  items                   Json      // Array of { image, frameColor, size, quantity, price }
  
  // Order management
  orderStatus             String    @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  trackingNumber          String?
  trackingCarrier         String?
  adminNotes              String?
  
  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  paidAt                  DateTime?
  shippedAt               DateTime?
  deliveredAt             DateTime?
  
  // New indexes
  @@index([userId, createdAt(sort: Desc)]) // User order history
  @@index([paymentStatus]) // Payment status queries
  @@index([orderStatus]) // Order fulfillment queries
  @@index([customerEmail]) // Customer lookup
  @@map("colibrrri_cart_orders")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  images          Image[]
  createdAt       DateTime  @default(now())

  @@map("colibrrri_tags")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@index([expiresAt]) // For session cleanup
  @@map("colibrrri_sessions")
}

model CartSession {
  id                    String    @id @default(cuid())
  sessionId             String    @unique
  userId                String?
  user                  User?     @relation(fields: [userId], references: [id])
  items                 Json      // Array of cart items
  totalAmount           Float
  itemCount             Int
  currency              String    @default("UAH")
  customerEmail         String?
  userIp                String?
  userAgent             String?
  status                String    @default("active") // active, abandoned, converted
  lastActivityAt        DateTime  @default(now())
  abandonedAt           DateTime?
  convertedToOrderId    String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  expiresAt             DateTime?

  // New indexes
  @@index([status, abandonedAt]) // For finding abandoned carts
  @@index([userId]) // User cart queries
  @@index([expiresAt]) // For cleanup
  @@map("colibrrri_cart_sessions")
}