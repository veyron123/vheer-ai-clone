generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String?
  fullName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  totalCredits    Int       @default(100)
  lastCreditUpdate DateTime  @default(now())
  emailVerified   Boolean   @default(false)
  googleId        String?   @unique
  facebookId      String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscription    Subscription?
  images          Image[]
  generations     Generation[]
  credits         Credit[]
  payments        Payment[]
  favorites       Favorite[]
  orders          Order[]
  cartSessions    CartSession[]
  notificationSubscriptions NotificationSubscription[]

  @@map("colibrrri_users")
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String    @default("FREE")
  status          String    @default("ACTIVE")
  currentPeriodEnd DateTime?
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  wayforpayOrderReference String? // WayForPay orderReference for cancellation
  
  // Recurring payment fields
  isRecurring     Boolean   @default(false) // Is this a recurring subscription
  recurringToken  String?   // WayForPay recToken for recurring payments
  recurringMode   String?   // "MONTHLY", "YEARLY" - frequency of recurring payments
  nextPaymentDate DateTime? // Date of next automatic payment attempt
  lastPaymentDate DateTime? // Date of last successful payment
  failedPaymentAttempts Int @default(0) // Count of failed payment attempts
  maxFailedAttempts Int @default(3) // Maximum failed attempts before cancellation
  
  cancelledAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("colibrrri_subscriptions")
}

model Credit {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int
  type            String
  description     String?
  createdAt       DateTime  @default(now())
  
  @@map("colibrrri_credits")
}

model Image {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  url             String
  thumbnailUrl    String?
  cloudPath       String?   // Path for cloud storage deletion (Cloudinary public_id, S3 key, etc.)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  width           Int
  height          Int
  seed            Int?
  steps           Int?
  guidance        Float?
  isPublic        Boolean   @default(false)
  likes           Int       @default(0)
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  
  generation      Generation @relation(fields: [generationId], references: [id])
  generationId    String
  favorites       Favorite[]
  tags            Tag[]

  @@map("colibrrri_images")
}

model Generation {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  batchSize       Int       @default(1)
  status          String @default("PENDING")
  error           String?
  creditsUsed     Int
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  images          Image[]

  @@map("colibrrri_generations")
}

model Favorite {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId         String
  image           Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  
  @@unique([userId, imageId])
  @@map("colibrrri_favorites")
}

model Payment {
  id                      String    @id @default(cuid())
  userId                  String
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount                  Float
  currency                String    @default("USD")
  status                  String
  stripePaymentId         String?   @unique
  wayforpayOrderReference String?   @unique
  description             String?
  createdAt               DateTime  @default(now())

  @@map("colibrrri_payments")
}

model Order {
  id                      String    @id @default(cuid())
  userId                  String?
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderReference          String    @unique
  
  // Customer information
  customerFirstName       String?
  customerLastName        String?
  customerEmail           String
  customerPhone           String?
  
  // Billing address
  billingAddress          String?
  billingCity             String?
  billingCountry          String?
  billingPostalCode       String?
  
  // Shipping address
  shippingFirstName       String?
  shippingLastName        String?
  shippingAddress        String?
  shippingCity            String?
  shippingCountry         String?
  shippingPostalCode      String?
  shippingPhone           String?
  
  // Order details
  items                   Json      // Array of cart items
  subtotal                Float
  shippingCost            Float     @default(0)
  tax                     Float     @default(0)
  total                   Float
  currency                String    @default("UAH")
  
  // Payment information
  paymentMethod           String?   // card, paypal, etc.
  paymentStatus           String    @default("pending") // pending, paid, failed, refunded
  paymentReference        String?   // WayForPay transaction ID
  paidAt                  DateTime?
  
  // Fulfillment
  status                  String    @default("pending") // pending, processing, shipped, delivered, cancelled
  trackingNumber          String?
  trackingCarrier         String?   // ups, fedex, dhl, etc.
  shippedAt               DateTime?
  deliveredAt             DateTime?
  
  // Notes
  adminNotes              String?   @db.Text
  customerNotes           String?   @db.Text
  
  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  @@index([userId])
  @@index([orderReference])
  @@index([customerEmail])
  @@index([status])
  @@index([paymentStatus])
  @@map("colibrrri_orders")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  images          Image[]
  createdAt       DateTime  @default(now())

  @@map("colibrrri_tags")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("colibrrri_sessions")
}

model CartSession {
  id              String    @id @default(cuid())
  sessionId       String    @unique // Идентификатор сессии (анонимный или пользовательский)
  userId          String?   // Может быть null для анонимных пользователей
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Информация о корзине
  items           Json      // Массив товаров в корзине
  totalAmount     Float     @default(0)
  itemCount       Int       @default(0)
  currency        String    @default("UAH")
  
  // Статусы
  status          String    @default("active") // active, abandoned, converted
  convertedToOrderId String? // ID заказа, если корзина была оплачена
  
  // Информация о пользователе (для анонимных)
  userIp          String?
  userAgent       String?
  userCountry     String?
  userCity        String?
  
  // Временные метки
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastActivityAt  DateTime  @default(now())
  abandonedAt     DateTime? // Когда корзина была брошена
  
  // Email уведомления
  customerEmail   String?   // Email для напоминаний
  emailSent       Boolean   @default(false) // Отправлено ли напоминание
  emailSentAt     DateTime? // Когда отправлено напоминание
  
  @@index([userId])
  @@index([sessionId])
  @@index([status])
  @@index([lastActivityAt])
  @@map("colibrrri_cart_sessions")
}

model NotificationSubscription {
  id              String    @id @default(cuid())
  userId          String?
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Push notification data
  endpoint        String    @unique
  p256dh          String    // Public key for encryption
  auth            String    // Authentication secret
  
  // Status
  isActive        Boolean   @default(true)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([endpoint])
  @@map("colibrrri_notification_subscriptions")
}

model AppSetting {
  id              String    @id @default(cuid())
  key             String    @unique
  value           String    @db.Text
  description     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("colibrrri_app_settings")
}