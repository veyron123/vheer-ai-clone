generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String?
  fullName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  totalCredits    Int       @default(10)
  lastCreditUpdate DateTime  @default(now())
  emailVerified   Boolean   @default(false)
  googleId        String?   @unique
  facebookId      String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscription    Subscription?
  images          Image[]
  generations     Generation[]
  credits         Credit[]
  payments        Payment[]
  favorites       Favorite[]
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String    @default("FREE")
  status          String    @default("ACTIVE")
  currentPeriodEnd DateTime?
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Credit {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int
  type            String
  description     String?
  createdAt       DateTime  @default(now())
}

model Image {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  url             String
  thumbnailUrl    String?
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  width           Int
  height          Int
  seed            Int?
  steps           Int?
  guidance        Float?
  isPublic        Boolean   @default(false)
  likes           Int       @default(0)
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  
  generation      Generation @relation(fields: [generationId], references: [id])
  generationId    String
  favorites       Favorite[]
  tags            Tag[]
}

model Generation {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  batchSize       Int       @default(1)
  status          String @default("PENDING")
  error           String?
  creditsUsed     Int
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  images          Image[]
}

model Favorite {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId         String
  image           Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  
  @@unique([userId, imageId])
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String    @default("USD")
  status          String
  stripePaymentId String?   @unique
  description     String?
  createdAt       DateTime  @default(now())
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  images          Image[]
  createdAt       DateTime  @default(now())
}

