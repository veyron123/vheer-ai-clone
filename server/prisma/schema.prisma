generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  password        String?
  fullName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  role            String    @default("USER") // USER, ADMIN
  totalCredits    Int       @default(100)
  lastCreditUpdate DateTime  @default(now())
  emailVerified   Boolean   @default(false)
  googleId        String?   @unique
  facebookId      String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  subscription    Subscription?
  images          Image[]
  generations     Generation[]
  credits         Credit[]
  payments        Payment[]
  favorites       Favorite[]
  cartOrders      CartOrder[]

  @@map("colibrrri_users")
}

model Subscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String    @default("FREE")
  status          String    @default("ACTIVE")
  currentPeriodEnd DateTime?
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  wayforpayOrderReference String? // WayForPay orderReference for cancellation
  cancelledAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("colibrrri_subscriptions")
}

model Credit {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int
  type            String
  description     String?
  createdAt       DateTime  @default(now())
  
  @@map("colibrrri_credits")
}

model Image {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  url             String
  thumbnailUrl    String?
  cloudPath       String?   // Path for cloud storage deletion (Cloudinary public_id, S3 key, etc.)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  width           Int
  height          Int
  seed            Int?
  steps           Int?
  guidance        Float?
  isPublic        Boolean   @default(false)
  likes           Int       @default(0)
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  
  generation      Generation @relation(fields: [generationId], references: [id])
  generationId    String
  favorites       Favorite[]
  tags            Tag[]

  @@map("colibrrri_images")
}

model Generation {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt          String
  negativePrompt  String?
  model           String
  style           String?
  batchSize       Int       @default(1)
  status          String @default("PENDING")
  error           String?
  creditsUsed     Int
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  
  images          Image[]

  @@map("colibrrri_generations")
}

model Favorite {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId         String
  image           Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  
  @@unique([userId, imageId])
  @@map("colibrrri_favorites")
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String    @default("USD")
  status          String
  stripePaymentId String?   @unique
  wayforpayOrderReference String? @unique
  description     String?
  createdAt       DateTime  @default(now())

  @@map("colibrrri_payments")
}

model CartOrder {
  id                      String    @id @default(cuid())
  orderReference          String    @unique
  userId                  String?
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Payment info
  amount                  Float
  currency                String    @default("UAH")
  paymentStatus           String    @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  transactionStatus       String?   // From WayForPay
  reasonCode              String?   // From WayForPay
  authCode                String?   // From WayForPay
  cardPan                 String?   // Masked card number
  
  // Customer info (from payment form)
  customerEmail           String?
  customerFirstName       String?
  customerLastName        String?
  customerPhone           String?
  customerAddress         String?
  customerCity            String?
  customerCountry         String?
  
  // Shipping info (from payment form)
  shippingFirstName       String?
  shippingLastName        String?
  shippingPhone           String?
  shippingAddress         String?
  shippingCity            String?
  shippingCountry         String?
  shippingPostalCode      String?
  
  // Order items (stored as JSON)
  items                   Json      // Array of { image, frameColor, size, quantity, price }
  
  // Order management
  orderStatus             String    @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  trackingNumber          String?
  trackingCarrier         String?
  adminNotes              String?
  
  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  paidAt                  DateTime?
  shippedAt               DateTime?
  deliveredAt             DateTime?
  
  @@map("colibrrri_cart_orders")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  images          Image[]
  createdAt       DateTime  @default(now())

  @@map("colibrrri_tags")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("colibrrri_sessions")
}