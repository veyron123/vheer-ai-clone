import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import crypto from 'crypto';

const prisma = new PrismaClient();

async function createTestAffiliateData() {
  try {
    console.log('üß™ –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...');

    // 1. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash('testpass123', 12);
    const testUser = await prisma.user.create({
      data: {
        email: 'test_affiliate@example.com',
        username: `affiliate_${crypto.randomBytes(4).toString('hex')}`,
        password: hashedPassword,
        fullName: 'Test Affiliate User',
        role: 'USER',
        totalCredits: 100,
        emailVerified: true
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.email);

    // 2. –°–æ–∑–¥–∞—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
    const affiliateCode = `TEST${crypto.randomBytes(4).toString('hex').toUpperCase()}`;
    const affiliate = await prisma.affiliate.create({
      data: {
        userId: testUser.id,
        code: affiliateCode,
        commissionRate: 20.0,
        status: 'active',
        tier: 'starter'
      }
    });

    console.log('‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–æ–º:', affiliateCode);

    // 3. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å Sub ID
    const subId = `test-${Date.now()}`;
    const affiliateLink = await prisma.affiliateLink.create({
      data: {
        affiliateId: affiliate.id,
        alias: `test-link-${Date.now()}`,
        url: `http://localhost:5178/?ref=${affiliateCode}&fp_sid=${subId}`,
        isDefault: true,
        isActive: true
      }
    });

    console.log('‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', affiliateLink.url);

    // 4. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–∫
    const testClick = await prisma.affiliateClick.create({
      data: {
        affiliateId: affiliate.id,
        linkId: affiliateLink.id,
        sessionId: `test_session_${Date.now()}`,
        ipAddress: '127.0.0.1',
        userAgent: 'Test-Agent/1.0',
        referer: 'https://google.com',
        landingPage: 'http://localhost:5178/',
        utmSource: 'test',
        utmMedium: 'affiliate',
        utmCampaign: 'test-campaign',
        subId: subId,
        country: 'UA',
        city: 'Kiev',
        deviceType: 'desktop'
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–∫ —Å–æ–∑–¥–∞–Ω');

    // 5. –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ñ–∏—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const referredUser = await prisma.user.create({
      data: {
        email: 'referred_user@example.com',
        username: `referred_${crypto.randomBytes(4).toString('hex')}`,
        password: hashedPassword,
        fullName: 'Referred Test User',
        role: 'USER',
        totalCredits: 100,
        emailVerified: true
      }
    });

    console.log('‚úÖ –†–µ—Ñ–∏—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', referredUser.email);

    // 6. –°–æ–∑–¥–∞—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    const referral = await prisma.affiliateReferral.create({
      data: {
        affiliateId: affiliate.id,
        userId: referredUser.id,
        linkId: affiliateLink.id,
        clickId: testClick.id,
        status: 'signup',
        lifetimeValue: 0.0
      }
    });

    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');

    // 7. –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Å—ã–ª–∫–∏
    await prisma.affiliateLink.update({
      where: { id: affiliateLink.id },
      data: {
        clickCount: 1,
        conversionCount: 1
      }
    });

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

    // 8. –°–æ–∑–¥–∞—é –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    await prisma.affiliateStatDaily.create({
      data: {
        affiliateId: affiliate.id,
        date: today,
        clicks: 1,
        uniqueClicks: 1,
        signups: 1,
        customers: 0,
        revenue: 0.0,
        commissions: 0.0
      }
    });

    console.log('‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('========================================');
    console.log(`üìß Email –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${testUser.email}`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å: testpass123`);
    console.log(`üè∑Ô∏è  –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥: ${affiliateCode}`);
    console.log(`üîó –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: ${affiliateLink.url}`);
    console.log(`üìä Sub ID: ${subId}`);
    console.log(`üë§ –†–µ—Ñ–∏—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${referredUser.email}`);
    console.log('========================================');

    return {
      affiliate: testUser,
      affiliateCode,
      testLink: affiliateLink.url,
      subId,
      referredUser
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
createTestAffiliateData().catch(console.error);