// Service Worker –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Vheer

const CACHE_NAME = 'vheer-notifications-v1';

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  event.waitUntil(self.clients.claim());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('üì¨ –ü–æ–ª—É—á–µ–Ω–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
  
  let notificationData = {
    title: 'Vheer - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    body: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: '/android-chrome-192x192.png',
    badge: '/favicon-32x32.png',
    vibrate: [200, 100, 200],
    requireInteraction: true,
    data: {
      url: '/admin',
      timestamp: Date.now()
    },
    actions: [
      {
        action: 'open',
        title: 'üîó –û—Ç–∫—Ä—ã—Ç—å'
      },
      {
        action: 'dismiss',
        title: '‚ùå –ó–∞–∫—Ä—ã—Ç—å'
      }
    ]
  };

  if (event.data) {
    try {
      const pushData = event.data.json();
      notificationData = { ...notificationData, ...pushData };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö push:', error);
    }
  }

  event.waitUntil(
    self.registration.showNotification(notificationData.title, notificationData)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
self.addEventListener('notificationclick', (event) => {
  console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event.action);
  
  event.notification.close();

  if (event.action === 'dismiss') {
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
  const data = event.notification.data || {};
  let urlToOpen = data.url || '/admin';

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (data.type) {
    switch (data.type) {
      case 'new_order':
        urlToOpen = '/admin?tab=orders';
        break;
      case 'abandoned_cart':
        urlToOpen = '/admin?tab=carts';
        break;
      case 'test':
        urlToOpen = '/admin?tab=notifications';
        break;
      default:
        urlToOpen = '/admin';
    }
  }

  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        for (const client of clientList) {
          if (client.url.includes('/admin') && 'focus' in client) {
            // –ï—Å–ª–∏ admin –æ—Ç–∫—Ä—ã—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (client.url !== urlToOpen) {
              return client.navigate ? client.navigate(urlToOpen) : client.focus();
            }
            return client.focus();
          }
        }
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        if (self.clients.openWindow) {
          return self.clients.openWindow(urlToOpen);
        }
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:', error);
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('notificationclose', (event) => {
  console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  const data = event.notification.data;
  if (data && data.trackingId) {
    fetch('/api/notifications/track', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        type: 'notification_closed',
        trackingId: data.trackingId,
        timestamp: Date.now()
      })
    }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', err));
  }
});

// Background Sync –¥–ª—è –æ—Ñ–ª–∞–π–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('sync', (event) => {
  if (event.tag === 'notifications-sync') {
    console.log('üîÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    event.waitUntil(syncPendingNotifications());
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function syncPendingNotifications() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const response = await fetch('/api/notifications/pending', {
      headers: {
        'Cache-Control': 'no-cache'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      
      if (data.notifications && data.notifications.length > 0) {
        for (const notification of data.notifications) {
          await self.registration.showNotification(notification.title, {
            body: notification.body,
            icon: notification.icon || '/android-chrome-192x192.png',
            badge: notification.badge || '/favicon-32x32.png',
            data: notification.data || {},
            requireInteraction: true
          });
        }
        
        console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ ${data.notifications.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
if ('periodicsync' in self.registration) {
  self.addEventListener('periodicsync', (event) => {
    if (event.tag === 'check-notifications') {
      console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      event.waitUntil(checkForNewNotifications());
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkForNewNotifications() {
  try {
    const response = await fetch('/api/notifications/check', {
      headers: {
        'Cache-Control': 'no-cache'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      
      if (data.hasNewNotifications) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (const notification of data.notifications) {
          await self.registration.showNotification(notification.title, {
            body: notification.body,
            icon: notification.icon || '/android-chrome-192x192.png',
            badge: notification.badge || '/favicon-32x32.png',
            data: notification.data || {},
            requireInteraction: true
          });
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', (event) => {
  console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'CHECK_NOTIFICATIONS') {
    checkForNewNotifications();
  }
});

console.log('üöÄ Service Worker Vheer –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');