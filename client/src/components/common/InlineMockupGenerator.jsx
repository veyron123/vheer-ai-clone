import React, { useRef, useEffect, useState } from 'react';
import { Frame, ShoppingCart, Maximize, X, ChevronUp, ChevronDown, Palette, Ruler } from 'lucide-react';
import useCartStore from '../../stores/cartStore';
import toast from 'react-hot-toast';

const InlineMockupGenerator = ({ imageUrl, aspectRatio, autoShow = false }) => {
  // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–∫–∞–ø–∞
  console.log('üñºÔ∏è InlineMockupGenerator received imageUrl:', imageUrl ? 'URL provided' : 'no URL', { autoShow, aspectRatio });
  
  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const detectAspectRatio = (width, height) => {
    const ratio = width / height;
    console.log('üîç Detecting aspect ratio:', { width, height, ratio });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
    if (Math.abs(ratio - 1) < 0.1) {
      return '1:1'; // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ ~1.0
    } else if (Math.abs(ratio - (4/3)) < 0.1) {
      return '4:3'; // Landscape ~1.33
    } else if (Math.abs(ratio - (3/4)) < 0.1) {
      return '3:4'; // Portrait ~0.75
    } else if (ratio > 1.2) {
      return '4:3'; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } else if (ratio < 0.9) {
      return '3:4'; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } else {
      return '1:1'; // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const [detectedAspectRatio, setDetectedAspectRatio] = useState(aspectRatio || '1:1');
  const canvasRef = useRef(null);
  const [isVisible, setIsVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [rotation, setRotation] = useState(0);
  const [scale, setScale] = useState(0.7);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [hasShownAuto, setHasShownAuto] = useState(false);
  const [selectedColor, setSelectedColor] = useState('white');
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const getDefaultSize = (ratio) => {
    switch (ratio) {
      case '1:1': return '12x12';
      case '3:4': return '6x8';
      case '4:3': return '8x6';
      default: return '12x12';
    }
  };
  
  const [selectedSize, setSelectedSize] = useState(getDefaultSize(aspectRatio || '1:1'));

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ —Ä–∞–º–æ–∫
  const frameColors = [
    { id: 'black', name: 'Black', color: '#1a1a1a', borderColor: '#000000' },
    { id: 'white', name: 'White', color: '#ffffff', borderColor: '#e5e5e5' }
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω
  const frameSizes = {
    '1:1': [
      { id: '10x10', name: '10"√ó10"', price: 1 },
      { id: '12x12', name: '12"√ó12"', price: 1 },
      { id: '14x14', name: '14"√ó14"', price: 1 },
      { id: '16x16', name: '16"√ó16"', price: 1 },
      { id: '18x18', name: '18"√ó18"', price: 1 }
    ],
    '3:4': [
      { id: '6x8', name: '6"√ó8"', price: 1 },
      { id: '12x16', name: '12"√ó16"', price: 1 },
      { id: '18x24', name: '18"√ó24"', price: 1 },
      { id: '24x32', name: '24"√ó32"', price: 1 }
    ],
    '4:3': [
      { id: '8x6', name: '8"√ó6"', price: 1 },
      { id: '16x12', name: '16"√ó12"', price: 1 },
      { id: '24x18', name: '24"√ó18"', price: 1 },
      { id: '32x24', name: '32"√ó24"', price: 1 }
    ]
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const currentFrameSizes = frameSizes[detectedAspectRatio] || frameSizes['1:1'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –º–æ–∫–∞–ø—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω
  const getMockupFramePathWithRatio = (size, color, previewType = 'main', aspectRatio) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    let folderName = '';
    let filename = '';
    
    switch (aspectRatio) {
      case '1:1':
        folderName = 'Frames 1-1';
        // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä + —Ü–≤–µ—Ç: "10-10black.png"
        const sizeFormatted = size.replace('x', '-');
        filename = `${sizeFormatted}${color}.png`;
        break;
        
      case '3:4':
        folderName = 'Frames 3-4';
        const sizeFormattedPortrait = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8-Context-Preview.png"
          filename = `${sizeFormattedPortrait}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8.png"
          filename = `${sizeFormattedPortrait}.png`;
        }
        break;
        
      case '4:3':
        folderName = 'Frames 4-3';
        // –î–ª—è 4:3 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Ü–≤–µ—Ç–∞: "8-6.png"
        filename = `${size.replace('x', '-')}.png`;
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        folderName = 'Frames 1-1';
        filename = 'frame-1x1.png';
        break;
    }
    
    const fullPath = `/Mockup images/${folderName}/${filename}`;
    
    console.log('üñºÔ∏è Frame path with ratio:', { 
      aspectRatio, 
      size, 
      color, 
      previewType,
      folderName, 
      filename, 
      fullPath 
    });
    
    return fullPath;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –º–æ–∫–∞–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏ —Ç–∏–ø–∞ –ø—Ä–µ–≤—å—é
  const getMockupFramePath = (size, color, previewType = 'main') => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    let folderName = '';
    let filename = '';
    
    switch (detectedAspectRatio) {
      case '1:1':
        folderName = 'Frames 1-1';
        // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä + —Ü–≤–µ—Ç: "10-10black.png"
        const sizeFormatted = size.replace('x', '-');
        filename = `${sizeFormatted}${color}.png`;
        break;
        
      case '3:4':
        folderName = 'Frames 3-4';
        const sizeFormattedPortrait = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8-Context-Preview.png"
          filename = `${sizeFormattedPortrait}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8.png"
          filename = `${sizeFormattedPortrait}.png`;
        }
        break;
        
      case '4:3':
        folderName = 'Frames 4-3';
        // –î–ª—è 4:3 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Ü–≤–µ—Ç–∞: "8-6.png"
        filename = `${size.replace('x', '-')}.png`;
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        folderName = 'Frames 1-1';
        filename = 'frame-1x1.png';
        break;
    }
    
    const fullPath = `/Mockup images/${folderName}/${filename}`;
    
    console.log('üñºÔ∏è Auto-selected mockup:', { 
      detectedAspectRatio, 
      size, 
      color, 
      previewType,
      folderName, 
      filename, 
      fullPath 
    });
    
    return fullPath;
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–º–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω
  const frameConfig = {
    '1:1': {
      name: 'Square Frame 1:1',
      frame: getMockupFramePath(selectedSize, selectedColor),
    },
    '3:4': {
      name: 'Portrait Frame 3:4',
      frame: getMockupFramePath(selectedSize, selectedColor),
    },
    '4:3': {
      name: 'Landscape Frame 4:3',
      frame: getMockupFramePath(selectedSize, selectedColor),
    }
  };

  const currentFrame = frameConfig[detectedAspectRatio] || frameConfig['1:1'];

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (autoShow && imageUrl && !hasShownAuto) {
      // DEBUG MODE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∫–∞–ø —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: setTimeout —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1000–º—Å –¥–ª—è production —Ä–µ–∂–∏–º–∞
      // const timer = setTimeout(() => {
      //   setIsVisible(true);
      //   setHasShownAuto(true);
      // }, 1000);
      // return () => clearTimeout(timer);
      
      // IMMEDIATE MOCKUP FOR DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∫–∞–ø –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      setIsVisible(true);
      setHasShownAuto(true);
    }
  }, [imageUrl, autoShow, hasShownAuto]);

  // –°–±—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (!imageUrl) {
      setIsVisible(false);
      setHasShownAuto(false);
      setIsExpanded(true);
    }
  }, [imageUrl]);

  // –°–±—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  useEffect(() => {
    setSelectedSize(getDefaultSize(detectedAspectRatio));
  }, [detectedAspectRatio]);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–∫–∞–ø–∞
  useEffect(() => {
    console.log('üé® Mockup render effect triggered:', { 
      imageUrl: imageUrl ? 'exists' : 'missing', 
      isVisible, 
      detectedAspectRatio,
      selectedSize,
      canvasRef: canvasRef.current ? 'ready' : 'not ready'
    });
    
    if (!imageUrl || !isVisible) {
      setIsLoading(false);
      return;
    }
    
    if (!canvasRef.current) {
      const timeout = setTimeout(() => {
        setIsLoading(true);
      }, 100);
      return () => clearTimeout(timeout);
    }
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // –í–†–ï–ú–ï–ù–ù–û —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–∑–º–µ—Ä - –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    canvas.width = 800; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    canvas.height = 600; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const userImg = new Image();
    
    userImg.onerror = (error) => {
      const fallbackImg = new Image();
      fallbackImg.onload = () => {
        renderImageOnCanvas(fallbackImg);
      };
      fallbackImg.onerror = () => {
        setIsLoading(false);
      };
      fallbackImg.src = imageUrl;
    };
    
    const renderImageOnCanvas = (img) => {
      // üìù –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–î–•–û–î: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
      const imageAspectRatio = img.width / img.height;
      
      // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –°–¢–û–†–û–ù
      const autoDetectedRatio = detectAspectRatio(img.width, img.height);
      console.log('üéØ Aspect ratio analysis:', {
        currentDetected: detectedAspectRatio,
        autoDetected: autoDetectedRatio,
        imageSize: `${img.width}x${img.height}`,
        imageRatio: (img.width / img.height).toFixed(3),
        willUpdate: autoDetectedRatio !== detectedAspectRatio
      });
      
      if (autoDetectedRatio !== detectedAspectRatio) {
        console.log('üîÑ Auto-updating aspect ratio:', detectedAspectRatio, '‚Üí', autoDetectedRatio);
        setDetectedAspectRatio(autoDetectedRatio);
      }
      
      // üéØ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –†–ê–ó–ú–ï–† –ö–ê–ù–í–ê–°–ê: –í–°–ï–ì–î–ê –ö–í–ê–î–†–ê–¢–ù–´–ô 1:1
      const canvasSize = 500; // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π canvas 500x500
      const canvasWidth = canvasSize;
      const canvasHeight = canvasSize;
      
      console.log('üìê Canvas dimensions fixed to:', { canvasWidth, canvasHeight, aspectRatio: '1:1' });
      
      // üìã –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–†–ò–°–û–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–ü–û–î –†–ê–ú–ö–û–ô)
      const drawUserImageFirst = (img, ctx, canvas, aspectRatio) => {
        ctx.save();
        
        // üìè –û–ü–†–ï–î–ï–õ–Ø–ï–ú –†–ê–ó–ú–ï–†–´ –ë–ï–õ–û–ô –û–ë–õ–ê–°–¢–ò –í–ù–£–¢–†–ò –†–ê–ú–ö–ò
        // –†–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø—ã ~10% —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const frameMargin = 50; // –æ—Ç—Å—Ç—É–ø—ã —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const innerWidth = canvas.width - (frameMargin * 2);
        const innerHeight = canvas.height - (frameMargin * 2);
        const innerX = frameMargin;
        const innerY = frameMargin;
        
        // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–ê–ö –í–ü–ò–°–ê–¢–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ë–ï–õ–£–Æ –û–ë–õ–ê–°–¢–¨
        let drawWidth, drawHeight, drawX, drawY;
        
        if (aspectRatio === '3:4' || aspectRatio === '4:3') {
          // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤–ø–∏—Å—ã–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
          const imgAspect = img.width / img.height;
          const innerAspect = innerWidth / innerHeight;
          
          if (imgAspect > innerAspect) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            drawWidth = innerWidth * scale;
            drawHeight = (innerWidth / imgAspect) * scale;
          } else {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            drawHeight = innerHeight * scale;
            drawWidth = (innerHeight * imgAspect) * scale;
          }
        } else {
          // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
          const size = Math.min(innerWidth, innerHeight) * scale;
          drawWidth = size;
          drawHeight = size;
        }
        
        // üìç –¶–ï–ù–¢–†–ò–†–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ë–ï–õ–û–ô –û–ë–õ–ê–°–¢–ò
        drawX = innerX + (innerWidth - drawWidth) / 2 + position.x;
        drawY = innerY + (innerHeight - drawHeight) / 2 + position.y;
        
        // üîÑ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–û–í–û–†–û–¢ –ï–°–õ–ò –ù–£–ñ–ù–û
        if (rotation !== 0) {
          const centerX = drawX + drawWidth / 2;
          const centerY = drawY + drawHeight / 2;
          ctx.translate(centerX, centerY);
          ctx.rotate((rotation * Math.PI) / 180);
          ctx.translate(-centerX, -centerY);
        }
        
        console.log('üñºÔ∏è Drawing user image first (under frame):', {
          aspectRatio,
          innerArea: `${innerWidth}x${innerHeight}`,
          imageSize: `${drawWidth.toFixed(0)}x${drawHeight.toFixed(0)}`,
          position: `${drawX.toFixed(0)}, ${drawY.toFixed(0)}`,
          scale,
          rotation
        });
        
        // üé® –†–ò–°–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
        ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
        ctx.restore();
      };
      
      // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ö–í–ê–î–†–ê–¢–ù–´–ô –†–ê–ó–ú–ï–† –ö–ê–ù–í–ê–°–ê
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      
      // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // üñºÔ∏è –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ê–ú–ö–£ –ò –û–¢–†–ò–°–û–í–´–í–ê–ï–ú –í–°–Å
      const frameImg = new Image();
      frameImg.onload = () => {
        console.log('‚úÖ Frame image loaded successfully:', {
          src: frameImg.src,
          aspectRatio: detectedAspectRatio,
          dimensions: `${frameImg.width}x${frameImg.height}`,
          selectedSize,
          selectedColor
        });
        
        // üñºÔ∏è –≠–¢–ê–ü 1: –†–ò–°–£–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –°–ù–ê–ß–ê–õ–ê
        drawUserImageFirst(img, ctx, canvas, autoDetectedRatio);
        
        // üé® –≠–¢–ê–ü 2: –†–ò–°–£–ï–ú –†–ê–ú–ö–£ –ü–û–í–ï–†–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        ctx.drawImage(frameImg, 0, 0, canvas.width, canvas.height);
        
        setIsLoading(false);
      };
      frameImg.onerror = (error) => {
        console.error('‚ùå Frame image failed to load:', {
          src: frameImg.src,
          aspectRatio: detectedAspectRatio,
          selectedSize,
          selectedColor,
          error
        });
        
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–º–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —á–µ—Ä–Ω—É—é —Ä–∞–º–∫—É
        console.warn('üîÑ Falling back to programmatic frame for:', detectedAspectRatio);
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 20;
        ctx.strokeRect(10, 10, canvas.width - 20, canvas.height - 20);
        ctx.strokeStyle = '#1a1a1a';
        ctx.lineWidth = 2;
        ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40);
        setIsLoading(false);
      };
      // üñºÔ∏è –í–´–ë–û–† –†–ê–ú–ö–ò –ù–ê –û–°–ù–û–í–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–ï–¢–ï–ö–¢–ò–†–û–í–ê–ù–ù–û–ì–û –°–û–û–¢–ù–û–®–ï–ù–ò–Ø
      console.log('üé® Frame selection logic:', {
        currentDetected: detectedAspectRatio,
        autoDetected: autoDetectedRatio,
        selectedSize,
        selectedColor,
        explanation: 'Using autoDetected ratio for immediate frame selection'
      });
      
      if (autoDetectedRatio === '1:1') {
        // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–º–∫—É
        frameImg.src = '/Mockup images/frame-1x1.png';
        console.log('üñºÔ∏è Using fixed frame for 1:1 image:', frameImg.src);
      } else {
        // –î–ª—è –Ω–µ-–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–º–∫–∏ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫
        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º autoDetectedRatio –¥–ª—è getMockupFramePath
        const tempDetectedRatio = detectedAspectRatio;
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è getMockupFramePath
        const framePathWithCorrectRatio = getMockupFramePathWithRatio(selectedSize, selectedColor, 'main', autoDetectedRatio);
        frameImg.src = framePathWithCorrectRatio;
        console.log('üñºÔ∏è Using dynamic frame for', autoDetectedRatio, 'image:', frameImg.src);
      }
    };
    
    userImg.onload = () => {
      console.log('‚úÖ User image loaded successfully:', { width: userImg.width, height: userImg.height });
      renderImageOnCanvas(userImg);
    };
    
    userImg.crossOrigin = 'anonymous';
    userImg.src = imageUrl;
    console.log('üîÑ Loading user image from:', imageUrl);
    
  }, [imageUrl, detectedAspectRatio, rotation, scale, position, isVisible]);

  const { addItem, openCart } = useCartStore();

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = async () => {
    if (!imageUrl) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—É
    const selectedSizeData = currentFrameSizes.find(s => s.id === selectedSize);
    const selectedColorData = frameColors.find(c => c.id === selectedColor);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ canvas —ç–∫—Å–ø–æ—Ä—Ç–∞)
    const cartItem = {
      imageUrl: imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      originalImageUrl: imageUrl,
      frameColor: selectedColor,
      frameColorName: selectedColorData?.name,
      size: selectedSize,
      sizeName: selectedSizeData?.name,
      price: selectedSizeData?.price || 1,
      aspectRatio: detectedAspectRatio,
      rotation: rotation,
      scale: scale,
      position: position,
      type: 'mockup'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    addItem(cartItem);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    toast.success('Added to cart!', {
      icon: 'üõí',
      duration: 2000
    });
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    setTimeout(() => {
      openCart();
    }, 500);
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
  const downloadMockup = () => {
    if (!canvasRef.current) return;
    
    const link = document.createElement('a');
    const sizeText = detectedAspectRatio === '1:1' ? `-${selectedSize}` : '';
    link.download = `mockup-${selectedColor}-${detectedAspectRatio}${sizeText}.png`;
    link.href = canvasRef.current.toDataURL();
    link.click();
  };

  if (!imageUrl) {
    return null;
  }

  return (
    <div className="mt-6 bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-pink-50 border-b border-gray-200">
        <div className="flex items-center gap-3">
          <Frame className="w-5 h-5 text-purple-600" />
          <h3 className="text-lg font-semibold text-gray-900">
            Mockup Generator
          </h3>
          <span className="px-2 py-1 bg-purple-100 text-purple-700 text-sm rounded font-medium">
            {detectedAspectRatio}
          </span>
          {isVisible && (
            <span className="px-2 py-1 bg-green-100 text-green-700 text-sm rounded font-medium">
              {currentFrameSizes.find(s => s.id === selectedSize)?.name} - ‚Ç¥{currentFrameSizes.find(s => s.id === selectedSize)?.price}
            </span>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {!isVisible && (
            <button
              onClick={() => setIsVisible(true)}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2"
            >
              <Frame className="w-4 h-4" />
              Create Mockup
            </button>
          )}
          
          {isVisible && (
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              {isExpanded ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
            </button>
          )}
          
          {isVisible && (
            <button
              onClick={() => setIsVisible(false)}
              className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          )}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∫–∞–ø–∞ */}
      {isVisible && isExpanded && (
        <div className="p-6">
          <div className="grid lg:grid-cols-2 gap-6">
            {/* –ü—Ä–µ–≤—å—é */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-3">Preview</h4>
              <div className="bg-gray-50 rounded-lg p-4 flex items-center justify-center min-h-[300px] relative">
                {isLoading && (
                  <div className="absolute inset-0 flex items-center justify-center bg-gray-50 rounded-lg z-10">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2"></div>
                      <p className="text-sm text-gray-500">Creating mockup...</p>
                    </div>
                  </div>
                )}
                <canvas
                  ref={canvasRef}
                  className={`max-w-full h-auto ${isLoading ? 'invisible' : 'visible'}`}
                  style={{ imageRendering: 'crisp-edges' }}
                />
              </div>
            </div>

            {/* Controls */}
            <div className="space-y-4">
              {/* Frame Color Selection with Dynamic Preview - —Ç–æ–ª—å–∫–æ –¥–ª—è 1:1 */}
              {detectedAspectRatio === '1:1' && (
                <div className="flex gap-4 items-start">
                  <div className="flex-1">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      <Palette className="w-4 h-4 inline mr-1" />
                      Frame color
                    </label>
                    <div className="flex gap-3">
                      {frameColors.map((color) => (
                        <label
                          key={color.id}
                          className="relative cursor-pointer"
                        >
                          <input
                            type="radio"
                            name="frameColor"
                            value={color.id}
                            checked={selectedColor === color.id}
                            onChange={(e) => setSelectedColor(e.target.value)}
                            className="sr-only"
                          />
                          <div className={`relative ${selectedColor === color.id ? 'ring-2 ring-purple-500 ring-offset-2' : ''} rounded-lg transition-all`}>
                            <div 
                              className="w-12 h-12 rounded-lg border-2"
                              style={{ 
                                backgroundColor: color.color,
                                borderColor: color.borderColor
                              }}
                            >
                              {selectedColor === color.id && (
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                  </svg>
                                </div>
                              )}
                            </div>
                          </div>
                        </label>
                      ))}
                    </div>
                  </div>
                  
                  {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–º–∫–∏ */}
                  <div className="flex-shrink-0">
                    <div className="bg-gray-100 rounded-lg overflow-hidden" style={{ width: '128px' }}>
                      <img 
                        src={getMockupFramePath(selectedSize, selectedColor)}
                        alt={`${selectedSize} ${selectedColor} frame`}
                        className="w-full h-auto block"
                        onError={(e) => {
                          e.target.style.display = 'none';
                          e.target.nextSibling.style.display = 'flex';
                        }}
                      />
                      <div className="w-full h-32 bg-gray-200 items-center justify-center text-xs text-gray-500 hidden">
                        No preview
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Frame Preview - –¥–ª—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è 3:4 (—Ç–æ–ª—å–∫–æ Context –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) */}
              {detectedAspectRatio === '3:4' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Palette className="w-4 h-4 inline mr-1" />
                    Frame Preview
                  </label>
                  <div className="bg-gray-100 rounded-lg border-2 border-gray-200 overflow-hidden mx-auto" style={{ width: '128px' }}>
                    <img 
                      src={getMockupFramePath(selectedSize, selectedColor, 'context')}
                      alt={`${selectedSize} context frame`}
                      className="w-full h-auto block"
                      onError={(e) => {
                        e.target.style.display = 'none';
                        e.target.nextSibling.style.display = 'flex';
                      }}
                    />
                    <div className="w-full h-32 bg-gray-200 items-center justify-center text-xs text-gray-500 hidden">
                      No context
                    </div>
                  </div>
                </div>
              )}

              {/* Frame Preview - –¥–ª—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è 4:3 */}
              {detectedAspectRatio === '4:3' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Palette className="w-4 h-4 inline mr-1" />
                    Frame Preview
                  </label>
                  <div className="w-32 h-24 bg-gray-100 rounded-lg border-2 border-gray-200 flex items-center justify-center overflow-hidden mx-auto">
                    <img 
                      src={getMockupFramePath(selectedSize, selectedColor, 'main')}
                      alt={`${selectedSize} frame`}
                      className="w-full h-full object-contain"
                      onError={(e) => {
                        e.target.style.display = 'none';
                        e.target.nextSibling.style.display = 'flex';
                      }}
                    />
                    <div className="w-full h-full bg-gray-200 items-center justify-center text-xs text-gray-500 hidden">
                      No preview
                    </div>
                  </div>
                </div>
              )}

              {/* Size Selection - –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Ruler className="w-4 h-4 inline mr-1" />
                  Size
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {currentFrameSizes.map((size) => (
                    <button
                      key={size.id}
                      onClick={() => setSelectedSize(size.id)}
                      className={`px-3 py-2 rounded-lg border-2 transition-all ${
                        selectedSize === size.id
                          ? 'border-purple-500 bg-purple-50 text-purple-700 font-medium'
                          : 'border-gray-200 hover:border-gray-300 text-gray-700'
                      }`}
                    >
                      <div className="text-sm font-medium">{size.name}</div>
                      <div className="text-xs text-gray-500">‚Ç¥{size.price}</div>
                    </button>
                  ))}
                </div>
              </div>
              
              {/* Scale */}
              <div>
                <label className="block text-sm text-gray-600 mb-2">
                  <Maximize className="w-4 h-4 inline mr-1" />
                  Scale: {(scale * 100).toFixed(0)}%
                </label>
                <input
                  type="range"
                  min="0.5"
                  max="2"
                  step="0.1"
                  value={scale}
                  onChange={(e) => setScale(Number(e.target.value))}
                  className="w-full"
                />
              </div>

              {/* Action Buttons */}
              <div className="pt-4 border-t">
                <button
                  onClick={addToCart}
                  disabled={isLoading}
                  className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 disabled:bg-gray-300 flex items-center justify-center gap-2 transition-colors font-semibold shadow-lg"
                >
                  <ShoppingCart className="w-5 h-5" />
                  ADD TO CART
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InlineMockupGenerator;