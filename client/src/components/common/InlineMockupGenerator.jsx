import React, { useRef, useEffect, useState } from 'react';
import { Frame, ShoppingCart, Maximize, X, ChevronUp, ChevronDown, Palette, Ruler } from 'lucide-react';
import useCartStore from '../../stores/cartStore';
import toast from 'react-hot-toast';

const InlineMockupGenerator = ({ imageUrl, aspectRatio, autoShow = false }) => {
  // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–∫–∞–ø–∞
  console.log('üñºÔ∏è InlineMockupGenerator received imageUrl:', imageUrl ? 'URL provided' : 'no URL', { autoShow, aspectRatio });
  
  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const detectAspectRatio = (width, height) => {
    const ratio = width / height;
    console.log('üîç Detecting aspect ratio:', { width, height, ratio });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
    if (Math.abs(ratio - 1) < 0.1) {
      return '1:1'; // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ ~1.0
    } else if (Math.abs(ratio - (4/3)) < 0.1) {
      return '4:3'; // Landscape ~1.33
    } else if (Math.abs(ratio - (3/4)) < 0.1) {
      return '3:4'; // Portrait ~0.75
    } else if (ratio > 1.2) {
      return '4:3'; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } else if (ratio < 0.9) {
      return '3:4'; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } else {
      return '1:1'; // –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const [detectedAspectRatio, setDetectedAspectRatio] = useState(aspectRatio || '1:1');
  const mainCanvasRef = useRef(null); // –û—Å–Ω–æ–≤–Ω–æ–π canvas –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const frameCanvasRef = useRef(null); // Canvas –¥–ª—è frame preview
  const [isVisible, setIsVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  
  // Debug isVisible changes
  useEffect(() => {
    console.log('üîÑ isVisible changed to:', isVisible);
  }, [isVisible]);
  
  // Debug isLoading changes
  useEffect(() => {
    console.log('üîÑ isLoading changed to:', isLoading);
  }, [isLoading]);
  const [rotation, setRotation] = useState(0);
  // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scale –∏ position –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const [scalePerSize, setScalePerSize] = useState({});
  const [positionPerSize, setPositionPerSize] = useState({});
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è scale –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω 5-100%)
  const getCurrentScale = () => {
    if (scalePerSize[selectedSize] !== undefined) {
      return scalePerSize[selectedSize];
    }
    
    // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const defaultScales = {
      '6x8': 0.26,   // 26%
      '12x16': 0.43, // 43%
      '18x24': 0.40, // 40%
      '24x32': 0.47  // 47%
    };
    
    return defaultScales[selectedSize] || 0.9; // –û—Å–Ω–æ–≤–Ω–æ–π canvas —Ç–µ–ø–µ—Ä—å 90%
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ scale –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const setCurrentScale = (newScale) => {
    setScalePerSize(prev => ({
      ...prev,
      [selectedSize]: newScale
    }));
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è position –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const getCurrentPosition = () => {
    if (positionPerSize[selectedSize] !== undefined) {
      return positionPerSize[selectedSize];
    }
    
    // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const defaultPositions = {
      '6x8': { x: -5, y: -22 },  // X=-5px, Y=-22px
      '12x16': { x: -4, y: -39 }, // X=-4px, Y=-39px
      '18x24': { x: 0, y: -41 }, // Y=-41px
      '24x32': { x: 0, y: -70 }  // Y=-70px
    };
    
    return defaultPositions[selectedSize] || { x: 0, y: 0 }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ position –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const setCurrentPosition = (newPosition) => {
    setPositionPerSize(prev => ({
      ...prev,
      [selectedSize]: newPosition
    }));
  };
  
  const [hasShownAuto, setHasShownAuto] = useState(false);
  const [selectedColor, setSelectedColor] = useState('white');
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const getDefaultSize = (ratio) => {
    switch (ratio) {
      case '1:1': return '12x12';
      case '3:4': return '6x8';
      case '4:3': return '8x6';
      default: return '12x12';
    }
  };
  
  const [selectedSize, setSelectedSize] = useState(getDefaultSize(aspectRatio || '1:1'));

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ —Ä–∞–º–æ–∫
  const frameColors = [
    { id: 'black', name: 'Black', color: '#1a1a1a', borderColor: '#000000' },
    { id: 'white', name: 'White', color: '#ffffff', borderColor: '#e5e5e5' }
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω
  const frameSizes = {
    '1:1': [
      { id: '10x10', name: '10"√ó10"', price: 1 },
      { id: '12x12', name: '12"√ó12"', price: 1 },
      { id: '14x14', name: '14"√ó14"', price: 1 },
      { id: '16x16', name: '16"√ó16"', price: 1 },
      { id: '18x18', name: '18"√ó18"', price: 1 }
    ],
    '3:4': [
      { id: '6x8', name: '6"√ó8"', price: 1 },
      { id: '12x16', name: '12"√ó16"', price: 1 },
      { id: '18x24', name: '18"√ó24"', price: 1 },
      { id: '24x32', name: '24"√ó32"', price: 1 }
    ],
    '4:3': [
      { id: '8x6', name: '8"√ó6"', price: 1 },
      { id: '16x12', name: '16"√ó12"', price: 1 },
      { id: '24x18', name: '24"√ó18"', price: 1 },
      { id: '32x24', name: '32"√ó24"', price: 1 }
    ]
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  const currentFrameSizes = frameSizes[detectedAspectRatio] || frameSizes['1:1'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –º–æ–∫–∞–ø—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω
  const getMockupFramePathWithRatio = (size, color, previewType = 'main', aspectRatio) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    let folderName = '';
    let filename = '';
    
    switch (aspectRatio) {
      case '1:1':
        folderName = 'Frames 1-1';
        const sizeFormatted = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "10-10black-Context-Preview.png" (–µ—Å–ª–∏ –µ—Å—Ç—å)
          filename = `${sizeFormatted}${color}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ: "10-10black.png"
          filename = `${sizeFormatted}${color}.png`;
        }
        break;
        
      case '3:4':
        folderName = 'Frames 3-4';
        const sizeFormattedPortrait = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8-Context-Preview.png"
          filename = `${sizeFormattedPortrait}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8.png"
          filename = `${sizeFormattedPortrait}.png`;
        }
        break;
        
      case '4:3':
        folderName = 'Frames 4-3';
        const sizeFormattedLandscape = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "8-6-Context-Preview.png" (–µ—Å–ª–∏ –µ—Å—Ç—å)
          filename = `${sizeFormattedLandscape}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "8-6.png"
          filename = `${sizeFormattedLandscape}.png`;
        }
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        folderName = 'Frames 1-1';
        filename = 'frame-1x1.png';
        break;
    }
    
    const fullPath = `/Mockup images/${folderName}/${filename}`;
    
    console.log('üñºÔ∏è Frame path with ratio:', { 
      aspectRatio, 
      size, 
      color, 
      previewType,
      folderName, 
      filename, 
      fullPath 
    });
    
    return fullPath;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –º–æ–∫–∞–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏ —Ç–∏–ø–∞ –ø—Ä–µ–≤—å—é
  const getMockupFramePath = (size, color, previewType = 'main') => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    let folderName = '';
    let filename = '';
    
    switch (detectedAspectRatio) {
      case '1:1':
        folderName = 'Frames 1-1';
        // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä + —Ü–≤–µ—Ç: "10-10black.png"
        const sizeFormatted = size.replace('x', '-');
        filename = `${sizeFormatted}${color}.png`;
        break;
        
      case '3:4':
        folderName = 'Frames 3-4';
        const sizeFormattedPortrait = size.replace('x', '-');
        if (previewType === 'context') {
          // –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8-Context-Preview.png"
          filename = `${sizeFormattedPortrait}-Context-Preview.png`;
        } else {
          // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: "6-8.png"
          filename = `${sizeFormattedPortrait}.png`;
        }
        break;
        
      case '4:3':
        folderName = 'Frames 4-3';
        // –î–ª—è 4:3 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Ü–≤–µ—Ç–∞: "8-6.png"
        filename = `${size.replace('x', '-')}.png`;
        break;
        
      default:
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        folderName = 'Frames 1-1';
        filename = 'frame-1x1.png';
        break;
    }
    
    const fullPath = `/Mockup images/${folderName}/${filename}`;
    
    console.log('üñºÔ∏è Auto-selected mockup:', { 
      detectedAspectRatio, 
      size, 
      color, 
      previewType,
      folderName, 
      filename, 
      fullPath 
    });
    
    return fullPath;
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–º–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω
  const frameConfig = {
    '1:1': {
      name: 'Square Frame 1:1',
      frame: getMockupFramePath(selectedSize, selectedColor),
    },
    '3:4': {
      name: 'Portrait Frame 3:4',
      frame: getMockupFramePath(selectedSize, selectedColor),
    },
    '4:3': {
      name: 'Landscape Frame 4:3',
      frame: getMockupFramePath(selectedSize, selectedColor),
    }
  };

  const currentFrame = frameConfig[detectedAspectRatio] || frameConfig['1:1'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞–ø–∞ –≤ Frame Preview
  const renderFramePreview = (size, canvasRef) => {
    console.log('üé® renderFramePreview called:', {
      size,
      imageUrl: imageUrl ? 'exists' : 'missing',
      canvasRefReady: canvasRef.current ? 'ready' : 'not ready',
      selectedColor,
      detectedAspectRatio
    });
    
    if (!imageUrl || !canvasRef.current) {
      console.log('‚ùå renderFramePreview: Early return - missing requirements');
      return;
    }
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas –¥–ª—è frame preview (—É–≤–µ–ª–∏—á–µ–Ω –¥–æ 160px)
    const previewSize = 160;
    canvas.width = previewSize;
    canvas.height = previewSize;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const userImg = new Image();
    userImg.crossOrigin = 'anonymous';
    
    userImg.onload = () => {
      console.log('‚úÖ Frame Preview: User image loaded');
      const autoDetectedRatio = detectAspectRatio(userImg.width, userImg.height);
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ frame preview
      const drawUserImageInPreview = (img, ctx, canvas, aspectRatio) => {
        ctx.save();
        
        // –û—Ç—Å—Ç—É–ø—ã —Ä–∞–º–∫–∏ (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è 160px)
        const frameMargin = 16; // ~10% –æ—Ç 160px
        const innerWidth = canvas.width - (frameMargin * 2);
        const innerHeight = canvas.height - (frameMargin * 2);
        const innerX = frameMargin;
        const innerY = frameMargin;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let drawWidth, drawHeight, drawX, drawY;
        
        if (aspectRatio === '3:4' || aspectRatio === '4:3') {
          const imgAspect = img.width / img.height;
          const innerAspect = innerWidth / innerHeight;
          
          if (imgAspect > innerAspect) {
            drawWidth = innerWidth * getCurrentScale();
            drawHeight = (innerWidth / imgAspect) * getCurrentScale();
          } else {
            drawHeight = innerHeight * getCurrentScale();
            drawWidth = (innerHeight * imgAspect) * getCurrentScale();
          }
        } else {
          const size = Math.min(innerWidth, innerHeight) * getCurrentScale();
          drawWidth = size;
          drawHeight = size;
        }
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º position
        const currentPos = getCurrentPosition();
        drawX = innerX + (innerWidth - drawWidth) / 2 + (currentPos.x * 0.3); // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è preview
        drawY = innerY + (innerHeight - drawHeight) / 2 + (currentPos.y * 0.3); // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è preview
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
        ctx.restore();
      };
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      const frameImg = new Image();
      frameImg.onload = () => {
        console.log('‚úÖ Frame Preview: Context frame loaded:', frameImg.src);
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        drawUserImageInPreview(userImg, ctx, canvas, autoDetectedRatio);
        // –ó–∞—Ç–µ–º —Ä–∞–º–∫—É –ø–æ–≤–µ—Ä—Ö
        ctx.drawImage(frameImg, 0, 0, canvas.width, canvas.height);
        console.log('‚úÖ Frame Preview: Rendering completed!');
      };
      
      frameImg.onerror = (error) => {
        console.error('‚ùå Frame Preview: Context frame failed to load:', frameImg.src, error);
        // Fallback - –ø—Ä–æ—Å—Ç–∞—è —Ä–∞–º–∫–∞
        drawUserImageInPreview(userImg, ctx, canvas, autoDetectedRatio);
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 4;
        ctx.strokeRect(2, 2, canvas.width - 4, canvas.height - 4);
        console.log('‚úÖ Frame Preview: Fallback rendering completed!');
      };
      
      // –î–ª—è Frame Preview –∏—Å–ø–æ–ª—å–∑—É–µ–º Context –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const contextFramePath = getMockupFramePathWithRatio(size, selectedColor, 'context', autoDetectedRatio);
      console.log('üñºÔ∏è Frame Preview: Loading context frame:', contextFramePath);
      frameImg.src = contextFramePath;
    };
    
    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Frame Preview
    const proxiedImageUrlForPreview = imageUrl.startsWith('http') 
      ? `/api/image-proxy/proxy?url=${encodeURIComponent(imageUrl)}`
      : imageUrl;
      
    console.log('üé® Frame Preview: Using proxied image:', proxiedImageUrlForPreview);
    userImg.src = proxiedImageUrlForPreview;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('üîç Auto-show check:', {
      autoShow,
      imageUrl: imageUrl ? 'exists' : 'missing',
      hasShownAuto,
      willShow: autoShow && imageUrl && !hasShownAuto
    });
    
    if (autoShow && imageUrl) {
      if (!hasShownAuto) {
        console.log('‚úÖ Auto-showing mockup generator (first time)');
        setHasShownAuto(true);
      } else {
        console.log('‚úÖ Auto-showing mockup generator (image changed)');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∫–∞–ø –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –ª—é–±–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log('üîÑ Setting isVisible to TRUE');
      setIsVisible(true);
    }
  }, [imageUrl, autoShow, hasShownAuto]);

  // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('üîÑ Image change detected:', {
      imageUrl: imageUrl ? 'exists' : 'missing',
      willReset: !imageUrl
    });
    
    if (!imageUrl) {
      console.log('üßπ Resetting mockup state (no image)');
      console.log('üîÑ Setting isVisible to FALSE');
      setIsVisible(false);
      setHasShownAuto(false);
      setIsExpanded(true);
    } else {
      // –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–æ–∫–∞–ø —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤–∏–¥–∏–º—ã–º
      console.log('üîÑ New image detected, keeping mockup visible if already shown');
    }
  }, [imageUrl]);

  // –°–±—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
  useEffect(() => {
    setSelectedSize(getDefaultSize(detectedAspectRatio));
  }, [detectedAspectRatio]);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–æ–∫–∞–ø–∞
  useEffect(() => {
    console.log('üî• MAIN CANVAS useEffect STARTED!');
    console.log('üé® Main Mockup render effect triggered:', { 
      imageUrl: imageUrl ? 'exists' : 'missing', 
      isVisible, 
      detectedAspectRatio,
      selectedSize,
      mainCanvasRef: mainCanvasRef.current ? 'ready' : 'not ready'
    });
    
    if (!imageUrl || !isVisible) {
      console.log('‚ùå Main Canvas: Stopping render - imageUrl:', imageUrl ? 'exists' : 'missing', 'isVisible:', isVisible);
      setIsLoading(false);
      return;
    }
    
    if (!mainCanvasRef.current) {
      console.log('‚ùå Main Canvas: Canvas ref not ready, retrying in 100ms');
      const timeout = setTimeout(() => {
        setIsLoading(true);
      }, 100);
      return () => clearTimeout(timeout);
    }
    
    const canvas = mainCanvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º canvas –∏ context
    console.log('üîç Canvas details:', {
      canvas: !!canvas,
      ctx: !!ctx,
      canvasWidth: canvas.width,
      canvasHeight: canvas.height,
      canvasStyle: canvas.style.width + 'x' + canvas.style.height
    });
    
    // –í–†–ï–ú–ï–ù–ù–û —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–∑–º–µ—Ä - –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    canvas.width = 800; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    canvas.height = 600; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const userImg = new Image();
    
    userImg.onerror = (error) => {
      console.error('‚ùå Main Canvas: User image failed to load:', error);
      const fallbackImg = new Image();
      fallbackImg.onload = () => {
        console.log('‚úÖ Main Canvas: Fallback image loaded');
        renderImageOnCanvas(fallbackImg);
      };
      fallbackImg.onerror = () => {
        console.error('‚ùå Main Canvas: Fallback image also failed');
        setIsLoading(false);
      };
      fallbackImg.src = imageUrl;
    };
    
    const renderImageOnCanvas = (img) => {
      console.log('üöÄ MAIN CANVAS: renderImageOnCanvas CALLED!');
      console.log('üé® Main Canvas: Starting renderImageOnCanvas with:', {
        imageWidth: img.width,
        imageHeight: img.height,
        selectedSize,
        selectedColor,
        detectedAspectRatio,
        imageUrl,
        isVisible
      });
      
      // üìù –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–î–•–û–î: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
      const imageAspectRatio = img.width / img.height;
      
      // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –°–¢–û–†–û–ù
      const autoDetectedRatio = detectAspectRatio(img.width, img.height);
      console.log('üéØ Aspect ratio analysis:', {
        currentDetected: detectedAspectRatio,
        autoDetected: autoDetectedRatio,
        imageSize: `${img.width}x${img.height}`,
        imageRatio: (img.width / img.height).toFixed(3),
        willUpdate: autoDetectedRatio !== detectedAspectRatio
      });
      
      if (autoDetectedRatio !== detectedAspectRatio) {
        console.log('üîÑ Auto-updating aspect ratio:', detectedAspectRatio, '‚Üí', autoDetectedRatio);
        setDetectedAspectRatio(autoDetectedRatio);
        
        // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–°: –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        const newDefaultSize = getDefaultSize(autoDetectedRatio);
        console.log('üîÑ Auto-updating size for aspect ratio change:', selectedSize, '‚Üí', newDefaultSize);
        setSelectedSize(newDefaultSize);
      }
      
      // üéØ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –†–ê–ó–ú–ï–† –ö–ê–ù–í–ê–°–ê: –í–°–ï–ì–î–ê –ö–í–ê–î–†–ê–¢–ù–´–ô 1:1
      const canvasSize = 500; // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π canvas 500x500
      const canvasWidth = canvasSize;
      const canvasHeight = canvasSize;
      
      console.log('üìê Canvas dimensions fixed to:', { canvasWidth, canvasHeight, aspectRatio: '1:1' });
      
      // üìã –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–†–ò–°–û–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–ü–û–î –†–ê–ú–ö–û–ô)
      const drawUserImageFirst = (img, ctx, canvas, aspectRatio) => {
        ctx.save();
        
        // üìè –û–ü–†–ï–î–ï–õ–Ø–ï–ú –†–ê–ó–ú–ï–†–´ –ë–ï–õ–û–ô –û–ë–õ–ê–°–¢–ò –í–ù–£–¢–†–ò –†–ê–ú–ö–ò
        // –†–∞–º–∫–∞ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø—ã ~10% —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        const frameMargin = 30; // —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const innerWidth = canvas.width - (frameMargin * 2);
        const innerHeight = canvas.height - (frameMargin * 2);
        const innerX = frameMargin;
        const innerY = frameMargin;
        
        // üéØ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –û–°–ù–û–í–ù–û–ì–û CANVAS
        const mainCanvasScale = 0.85; // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± 85% –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        const mainCanvasPosition = { x: 0, y: 0 }; // —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ
        
        // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–ê–ö –í–ü–ò–°–ê–¢–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ë–ï–õ–£–Æ –û–ë–õ–ê–°–¢–¨
        let drawWidth, drawHeight, drawX, drawY;
        
        if (aspectRatio === '3:4' || aspectRatio === '4:3') {
          // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤–ø–∏—Å—ã–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
          const imgAspect = img.width / img.height;
          const innerAspect = innerWidth / innerHeight;
          
          if (imgAspect > innerAspect) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            drawWidth = innerWidth * mainCanvasScale;
            drawHeight = (innerWidth / imgAspect) * mainCanvasScale;
          } else {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            drawHeight = innerHeight * mainCanvasScale;
            drawWidth = (innerHeight * imgAspect) * mainCanvasScale;
          }
        } else {
          // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
          const size = Math.min(innerWidth, innerHeight) * mainCanvasScale;
          drawWidth = size;
          drawHeight = size;
        }
        
        // üìç –¶–ï–ù–¢–†–ò–†–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –í –ë–ï–õ–û–ô –û–ë–õ–ê–°–¢–ò (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        drawX = innerX + (innerWidth - drawWidth) / 2 + mainCanvasPosition.x;
        drawY = innerY + (innerHeight - drawHeight) / 2 + mainCanvasPosition.y;
        
        // üîÑ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–û–í–û–†–û–¢ –ï–°–õ–ò –ù–£–ñ–ù–û
        if (rotation !== 0) {
          const centerX = drawX + drawWidth / 2;
          const centerY = drawY + drawHeight / 2;
          ctx.translate(centerX, centerY);
          ctx.rotate((rotation * Math.PI) / 180);
          ctx.translate(-centerX, -centerY);
        }
        
        console.log('üñºÔ∏è Main Canvas: Drawing user image first (under frame):', {
          aspectRatio,
          innerArea: `${innerWidth}x${innerHeight}`,
          imageSize: `${drawWidth.toFixed(0)}x${drawHeight.toFixed(0)}`,
          position: `${drawX.toFixed(0)}, ${drawY.toFixed(0)}`,
          scale: mainCanvasScale,
          rotation,
          note: 'Fixed 85% scale for main canvas'
        });
        
        // üé® –†–ò–°–£–ï–ú –ë–ï–õ–´–ô –§–û–ù –î–õ–Ø –û–ë–õ–ê–°–¢–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏)
        ctx.fillStyle = 'white';
        ctx.fillRect(innerX, innerY, innerWidth, innerHeight);
        
        // üé® –†–ò–°–£–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï
        ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
        
        ctx.restore();
      };
      
      // üéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ö–í–ê–î–†–ê–¢–ù–´–ô –†–ê–ó–ú–ï–† –ö–ê–ù–í–ê–°–ê
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      
      // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // üñºÔ∏è –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ê–ú–ö–£ –ò –û–¢–†–ò–°–û–í–´–í–ê–ï–ú –í–°–Å
      const frameImg = new Image();
      frameImg.onload = () => {
        console.log('‚úÖ Main Canvas: Frame image loaded successfully:', {
          src: frameImg.src,
          aspectRatio: detectedAspectRatio,
          dimensions: `${frameImg.width}x${frameImg.height}`,
          selectedSize,
          selectedColor
        });
        
        // üñºÔ∏è –≠–¢–ê–ü 1: –†–ò–°–£–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –°–ù–ê–ß–ê–õ–ê
        console.log('üé® Main Canvas: Drawing user image first...');
        console.log('üîç Main Canvas: Image details:', {
          imgExists: !!img,
          imgComplete: img?.complete,
          imgWidth: img?.width || 'UNDEFINED',
          imgHeight: img?.height || 'UNDEFINED',
          canvasWidth: canvas.width,
          canvasHeight: canvas.height,
          aspectRatio: autoDetectedRatio
        });
        
        if (!img || !img.complete) {
          console.error('‚ùå Main Canvas: User image not ready in frameImg.onload!');
          return;
        }
        
        drawUserImageFirst(img, ctx, canvas, autoDetectedRatio);
        
        // üé® –≠–¢–ê–ü 2: –†–ò–°–£–ï–ú –†–ê–ú–ö–£ –ü–û–í–ï–†–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        ctx.drawImage(frameImg, 0, 0, canvas.width, canvas.height);
        
        console.log('‚úÖ Main Canvas: Frame drawn successfully');
        console.log('üîç Canvas state:', {
          width: canvas.width,
          height: canvas.height,
          hasContext: !!ctx,
          frameImgLoaded: frameImg.complete,
          userImgLoaded: userImg.complete
        });
        
        // Main canvas rendering completed
        setIsLoading(false);
      };
      frameImg.onerror = (error) => {
        console.error('‚ùå Main Canvas: Frame image failed to load:', {
          src: frameImg.src,
          aspectRatio: detectedAspectRatio,
          selectedSize,
          selectedColor,
          error
        });
        
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        console.log('üé® Main Canvas: Drawing user image (fallback mode)...');
        drawUserImageFirst(img, ctx, canvas, autoDetectedRatio);
        
        // –ó–∞—Ç–µ–º —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é —á–µ—Ä–Ω—É—é —Ä–∞–º–∫—É
        console.warn('üîÑ Main Canvas: Falling back to programmatic frame for:', detectedAspectRatio);
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 20;
        ctx.strokeRect(10, 10, canvas.width - 20, canvas.height - 20);
        ctx.strokeStyle = '#1a1a1a';
        ctx.lineWidth = 2;
        ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40);
        
        console.log('‚úÖ Main Canvas: Fallback rendering completed!');
        setIsLoading(false);
      };
      // üñºÔ∏è –í–´–ë–û–† –†–ê–ú–ö–ò –ù–ê –û–°–ù–û–í–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–ï–¢–ï–ö–¢–ò–†–û–í–ê–ù–ù–û–ì–û –°–û–û–¢–ù–û–®–ï–ù–ò–Ø
      console.log('üé® Frame selection logic:', {
        currentDetected: detectedAspectRatio,
        autoDetected: autoDetectedRatio,
        selectedSize,
        selectedColor,
        explanation: 'Using autoDetected ratio for immediate frame selection'
      });
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–º–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
      if (autoDetectedRatio === '1:1') {
        // –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        frameImg.src = '/Mockup images/Frames 1-1/12-12white.png';
        console.log('üñºÔ∏è Using square frame for 1:1 image:', frameImg.src);
      } else if (autoDetectedRatio === '3:4') {
        // –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 3:4
        frameImg.src = '/Mockup images/Frames 3-4/6-8.png';
        console.log('üñºÔ∏è Using portrait frame for 3:4 image:', frameImg.src);
      } else if (autoDetectedRatio === '4:3') {
        // –î–ª—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 4:3
        frameImg.src = '/Mockup images/Frames 4-3/8-6.png';
        console.log('üñºÔ∏è Using landscape frame for 4:3 image:', frameImg.src);
      } else {
        // Fallback
        frameImg.src = '/Mockup images/Frames 1-1/12-12white.png';
        console.log('üñºÔ∏è Using fallback frame:', frameImg.src);
      }
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    userImg.onload = () => {
      console.log('‚úÖ Main Canvas: User image loaded successfully');
      renderImageOnCanvas(userImg);
    };
    
    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
    const proxiedImageUrl = imageUrl.startsWith('http') 
      ? `/api/image-proxy/proxy?url=${encodeURIComponent(imageUrl)}`
      : imageUrl;
      
    userImg.crossOrigin = 'anonymous';
    userImg.src = proxiedImageUrl;
    console.log('üîÑ Main Canvas: Loading user image from:', proxiedImageUrl, '(original:', imageUrl, ')');
    console.log('üîÑ Main Canvas: useEffect completed setup, waiting for image to load...');
    console.log('üî• MAIN CANVAS useEffect ENDED - image loading started!');
    
  }, [imageUrl, detectedAspectRatio, rotation, isVisible]); // Main canvas –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç scalePerSize/positionPerSize

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–∫–∞–ø–∞ –≤ Frame Preview (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
  useEffect(() => {
    console.log('üñºÔ∏è Frame Preview useEffect triggered:', {
      imageUrl: imageUrl ? 'exists' : 'missing',
      isVisible,
      selectedSize,
      detectedAspectRatio,
      selectedColor,
      frameCanvasRefReady: frameCanvasRef.current ? 'ready' : 'not ready'
    });
    
    if (!imageUrl || !isVisible || !selectedSize) {
      console.log('‚ùå Frame Preview: Stopping - missing requirements');
      return;
    }
    
    console.log('üîÑ Frame Preview: Updating for selected size:', selectedSize, '(using Context images)');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫–∞–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const canvasRef = frameCanvasRef.current;
    if (canvasRef) {
      console.log('üé® Frame Preview: Starting render with timeout...');
      setTimeout(() => {
        renderFramePreview(selectedSize, { current: canvasRef });
      }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    } else {
      console.log('‚ùå Frame Preview: Canvas ref not ready');
    }
    
  }, [imageUrl, detectedAspectRatio, selectedColor, scalePerSize, positionPerSize, rotation, isVisible, selectedSize]);

  const { addItem, openCart } = useCartStore();

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = async () => {
    if (!imageUrl) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω—É
    const selectedSizeData = currentFrameSizes.find(s => s.id === selectedSize);
    const selectedColorData = frameColors.find(c => c.id === selectedColor);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ canvas —ç–∫—Å–ø–æ—Ä—Ç–∞)
    const cartItem = {
      imageUrl: imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      originalImageUrl: imageUrl,
      frameColor: selectedColor,
      frameColorName: selectedColorData?.name,
      size: '8x6', // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ canvas
      sizeName: '8"√ó6"', // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      price: 1, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ canvas
      aspectRatio: detectedAspectRatio,
      rotation: rotation,
      scale: 0.7, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π scale 70% –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ canvas
      position: { x: 0, y: 0 }, // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
      type: 'mockup'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    addItem(cartItem);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    toast.success('Added to cart!', {
      icon: 'üõí',
      duration: 2000
    });
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    setTimeout(() => {
      openCart();
    }, 500);
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
  const downloadMockup = () => {
    if (!mainCanvasRef.current) return;
    
    const link = document.createElement('a');
    const sizeText = detectedAspectRatio === '1:1' ? `-${selectedSize}` : '';
    link.download = `mockup-${selectedColor}-${detectedAspectRatio}${sizeText}.png`;
    link.href = mainCanvasRef.current.toDataURL();
    link.click();
  };

  if (!imageUrl) {
    return null;
  }

  return (
    <div className="mt-6 bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-pink-50 border-b border-gray-200">
        <div className="flex items-center gap-3">
          <Frame className="w-5 h-5 text-purple-600" />
          <h3 className="text-lg font-semibold text-gray-900">
            Mockup Generator
          </h3>
          <span className="px-2 py-1 bg-purple-100 text-purple-700 text-sm rounded font-medium">
            {detectedAspectRatio}
          </span>
          {isVisible && (
            <span className="px-2 py-1 bg-green-100 text-green-700 text-sm rounded font-medium">
              {currentFrameSizes.find(s => s.id === selectedSize)?.name} - ‚Ç¥{currentFrameSizes.find(s => s.id === selectedSize)?.price}
            </span>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {!isVisible && (
            <button
              onClick={() => setIsVisible(true)}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2"
            >
              <Frame className="w-4 h-4" />
              Create Mockup
            </button>
          )}
          
          {isVisible && (
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              {isExpanded ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
            </button>
          )}
          
          {isVisible && (
            <button
              onClick={() => setIsVisible(false)}
              className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          )}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∫–∞–ø–∞ */}
      {isVisible && isExpanded && (
        <div className="p-6">
          <div className="grid lg:grid-cols-2 gap-6">
            {/* –ü—Ä–µ–≤—å—é */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-3">Preview</h4>
              <div className="bg-gray-50 rounded-lg p-4 flex items-center justify-center min-h-[300px] relative">
                {isLoading && (
                  <div className="absolute inset-0 flex items-center justify-center bg-gray-50 rounded-lg z-10">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-2"></div>
                      <p className="text-sm text-gray-500">Creating mockup...</p>
                    </div>
                  </div>
                )}
                <canvas
                  ref={mainCanvasRef}
                  className={`max-w-full h-auto ${isLoading ? 'invisible' : 'visible'}`}
                  style={{ imageRendering: 'crisp-edges' }}
                />
              </div>
            </div>

            {/* Controls */}
            <div className="space-y-4">
              {/* Frame Color Selection - —Ç–æ–ª—å–∫–æ –¥–ª—è 1:1 */}
              {detectedAspectRatio === '1:1' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Palette className="w-4 h-4 inline mr-1" />
                    Frame color
                  </label>
                  <div className="flex gap-3">
                    {frameColors.map((color) => (
                      <label
                        key={color.id}
                        className="relative cursor-pointer"
                      >
                        <input
                          type="radio"
                          name="frameColor"
                          value={color.id}
                          checked={selectedColor === color.id}
                          onChange={(e) => setSelectedColor(e.target.value)}
                          className="sr-only"
                        />
                        <div className={`relative ${selectedColor === color.id ? 'ring-2 ring-purple-500 ring-offset-2' : ''} rounded-lg transition-all`}>
                          <div 
                            className="w-12 h-12 rounded-lg border-2"
                            style={{ 
                              backgroundColor: color.color,
                              borderColor: color.borderColor
                            }}
                          >
                            {selectedColor === color.id && (
                              <div className="absolute inset-0 flex items-center justify-center">
                                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                              </div>
                            )}
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              {/* Frame Preview - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–∫–∞–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ */}
              {(detectedAspectRatio === '3:4' || detectedAspectRatio === '4:3' || detectedAspectRatio === '1:1') && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    <Palette className="w-4 h-4 inline mr-1" />
                    Frame Preview - {currentFrameSizes.find(s => s.id === selectedSize)?.name}
                  </label>
                  <div className="text-center">
                    <div className="bg-gray-100 rounded-lg border-2 border-gray-200 overflow-hidden mx-auto" style={{ width: '160px', height: '160px' }}>
                      <canvas
                        ref={frameCanvasRef}
                        width={160}
                        height={160}
                        className="w-full h-full object-contain"
                        style={{ imageRendering: 'crisp-edges' }}
                      />
                    </div>
                  </div>
                </div>
              )}


              {/* Size Selection - –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Ruler className="w-4 h-4 inline mr-1" />
                  Size
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {currentFrameSizes.map((size) => (
                    <button
                      key={size.id}
                      onClick={() => setSelectedSize(size.id)}
                      className={`px-3 py-2 rounded-lg border-2 transition-all ${
                        selectedSize === size.id
                          ? 'border-purple-500 bg-purple-50 text-purple-700 font-medium'
                          : 'border-gray-200 hover:border-gray-300 text-gray-700'
                      }`}
                    >
                      <div className="text-sm font-medium">{size.name}</div>
                      <div className="text-xs text-gray-500">‚Ç¥{size.price}</div>
                    </button>
                  ))}
                </div>
              </div>
              
{/* Position controls are hidden but functionality remains */}

              {/* Action Buttons */}
              <div className="pt-4 border-t">
                <button
                  onClick={addToCart}
                  disabled={isLoading}
                  className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 disabled:bg-gray-300 flex items-center justify-center gap-2 transition-colors font-semibold shadow-lg"
                >
                  <ShoppingCart className="w-5 h-5" />
                  ADD TO CART
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InlineMockupGenerator;