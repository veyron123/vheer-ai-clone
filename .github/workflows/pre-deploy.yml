name: Pre-Deploy Checks

on:
  push:
    branches: [main, master]

jobs:
  pre-deploy-checks:
    name: Pre-Deploy Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Validate render.yaml
        run: |
          echo "Validating render.yaml configuration..."
          if [ ! -f render.yaml ]; then
            echo "‚ùå render.yaml not found!"
            exit 1
          fi
          echo "‚úÖ render.yaml exists"

      - name: Check environment variables
        run: |
          echo "Checking required environment variables in render.yaml..."
          required_vars=(
            "DATABASE_URL"
            "JWT_SECRET"
            "NODE_ENV"
            "PORT"
          )
          
          for var in "${required_vars[@]}"; do
            if grep -q "$var" render.yaml; then
              echo "‚úÖ $var is configured"
            else
              echo "‚ö†Ô∏è Warning: $var might not be configured"
            fi
          done

      - name: Validate package.json scripts
        run: |
          echo "Checking required scripts..."
          cd server
          if [ ! -f package.json ]; then
            echo "‚ùå server/package.json not found!"
            exit 1
          fi
          
          # Check for required scripts
          node -e "
            const pkg = require('./package.json');
            const required = ['start'];
            const missing = required.filter(s => !pkg.scripts || !pkg.scripts[s]);
            if (missing.length > 0) {
              console.error('‚ùå Missing scripts:', missing.join(', '));
              process.exit(1);
            }
            console.log('‚úÖ All required scripts found');
          "

      - name: Check Prisma schema
        working-directory: ./server
        run: |
          echo "Validating Prisma schema..."
          npx prisma validate || (echo "‚ùå Prisma schema validation failed!" && exit 1)
          echo "‚úÖ Prisma schema is valid"

      - name: Check for database migrations
        working-directory: ./server
        run: |
          echo "Checking for pending migrations..."
          if [ -d "prisma/migrations" ]; then
            migration_count=$(ls -1 prisma/migrations | wc -l)
            echo "Found $migration_count migrations"
          else
            echo "‚ö†Ô∏è No migrations folder found. Using db push mode."
          fi

      - name: Security check
        run: |
          echo "Running security checks..."
          
          # Check for exposed secrets
          if grep -r "FLUX_API_KEY\s*=\s*['\"]" --include="*.js" --include="*.env" .; then
            echo "‚ùå Found hardcoded API keys!"
            exit 1
          fi
          
          # Check for .env in git
          if [ -f .env ]; then
            echo "‚ö†Ô∏è Warning: .env file found in repository (should be in .gitignore)"
          fi
          
          echo "‚úÖ Security checks passed"

      - name: Create deployment checklist
        run: |
          cat << EOF > deployment-checklist.md
          # üöÄ Deployment Checklist for Render
          
          ## ‚úÖ Pre-Deploy Checks Completed:
          - [x] Code syntax validation
          - [x] render.yaml configuration validated
          - [x] Prisma schema validated
          - [x] Security checks passed
          - [x] Package.json scripts verified
          
          ## üìù Render Auto-Deploy:
          - Render will automatically deploy this commit
          - Monitor at: https://dashboard.render.com
          - Live URL: https://colibrrri.com
          
          ## ‚ö†Ô∏è Post-Deploy Verification:
          - [ ] Check application health endpoint
          - [ ] Verify database connection
          - [ ] Test API endpoints
          - [ ] Confirm image generation works
          
          ## üîë Environment Variables to Verify in Render:
          - FLUX_API_KEY
          - GPT_IMAGE_API_KEY
          - GEMINI_API_KEY
          - IMGBB_API_KEY
          - QWEN_API_KEY
          - MIDJOURNEY_API_KEY
          - WAYFORPAY_MERCHANT_ACCOUNT
          - WAYFORPAY_SECRET_KEY
          
          Deployment Time: $(date)
          Commit: ${{ github.sha }}
          EOF
          
          cat deployment-checklist.md

      - name: Summary
        run: |
          echo "========================================="
          echo "‚úÖ PRE-DEPLOY CHECKS COMPLETED"
          echo "========================================="
          echo "üöÄ Render will now auto-deploy this commit"
          echo "üì¶ Services to be deployed:"
          echo "   - Backend: vheer-api"
          echo "   - Frontend: vheer-client"
          echo "   - Database: vheer-db (PostgreSQL)"
          echo "========================================="