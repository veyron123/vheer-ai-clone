// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤

import { PrismaClient } from '@prisma/client';
import CreditService from './server/services/creditService.js';

const prisma = new PrismaClient();

async function testCreditReset() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å FREE –ø–ª–∞–Ω–æ–º
    const freeUser = await prisma.user.upsert({
      where: { email: 'test-free@example.com' },
      update: {
        totalCredits: 250, // –£ –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        lastCreditUpdate: new Date(Date.now() - 25 * 60 * 60 * 1000) // –û–±–Ω–æ–≤–ª–µ–Ω–æ 25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      },
      create: {
        email: 'test-free@example.com',
        username: 'testfree',
        password: 'hashedpassword',
        totalCredits: 250,
        lastCreditUpdate: new Date(Date.now() - 25 * 60 * 60 * 1000)
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.subscription.upsert({
      where: { userId: freeUser.id },
      update: { plan: 'FREE' },
      create: {
        userId: freeUser.id,
        plan: 'FREE',
        status: 'ACTIVE'
      }
    });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å PREMIUM –ø–ª–∞–Ω–æ–º
    const premiumUser = await prisma.user.upsert({
      where: { email: 'test-premium@example.com' },
      update: {
        totalCredits: 500,
        lastCreditUpdate: new Date(Date.now() - 25 * 60 * 60 * 1000)
      },
      create: {
        email: 'test-premium@example.com',
        username: 'testpremium',
        password: 'hashedpassword',
        totalCredits: 500,
        lastCreditUpdate: new Date(Date.now() - 25 * 60 * 60 * 1000)
      }
    });
    
    await prisma.subscription.upsert({
      where: { userId: premiumUser.id },
      update: { plan: 'PREMIUM' },
      create: {
        userId: premiumUser.id,
        plan: 'PREMIUM',
        status: 'ACTIVE'
      }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
    console.log(`  - FREE user: ${freeUser.email} (${freeUser.totalCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤)`);
    console.log(`  - PREMIUM user: ${premiumUser.email} (${premiumUser.totalCredits} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n`);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const freeResult = await CreditService.addDailyCredits(freeUser.id);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', freeResult);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–±—Ä–æ—Å–∞ –¥–ª—è PREMIUM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–±—Ä–æ—Å–∞ –¥–ª—è PREMIUM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const premiumResult = await CreditService.addDailyCredits(premiumUser.id);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è PREMIUM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', premiumResult);
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±—Ä–æ—Å
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–π —Å–±—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const massResult = await CreditService.addDailyCreditsToAllUsers();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞:', {
      totalUsers: massResult.totalUsers,
      updatedUsers: massResult.updatedUsers,
      skippedUsers: massResult.skippedUsers
    });
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const finalFreeUser = await prisma.user.findUnique({
      where: { id: freeUser.id },
      include: { subscription: true }
    });
    const finalPremiumUser = await prisma.user.findUnique({
      where: { id: premiumUser.id },
      include: { subscription: true }
    });
    
    console.log(`FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${finalFreeUser.subscription.plan}):`, {
      –±—ã–ª–æ: 250,
      —Å—Ç–∞–ª–æ: finalFreeUser.totalCredits,
      –æ–∂–∏–¥–∞–ª–æ—Å—å: 100
    });
    
    console.log(`PREMIUM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (${finalPremiumUser.subscription.plan}):`, {
      –±—ã–ª–æ: 500,
      —Å—Ç–∞–ª–æ: finalPremiumUser.totalCredits,
      –æ–∂–∏–¥–∞–ª–æ—Å—å: 500
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∞:');
    const freeTestPassed = finalFreeUser.totalCredits === 100;
    const premiumTestPassed = finalPremiumUser.totalCredits === 500;
    
    console.log(`  - FREE –ø–ª–∞–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ 100: ${freeTestPassed ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}`);
    console.log(`  - PREMIUM –ø–ª–∞–Ω –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è: ${premiumTestPassed ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û'}`);
    
    if (freeTestPassed && premiumTestPassed) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testCreditReset();